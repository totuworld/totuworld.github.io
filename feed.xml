<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>totuworld&#39;s tech blog</title>
    <description>Full 🥩🔥 Developer</description>
    <link>https://blog.totu.dev/</link>
    <atom:link href="https://blog.totu.dev/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Sep 2019 13:55:29 +0900</pubDate>
    <lastBuildDate>Mon, 16 Sep 2019 13:55:29 +0900</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      
        <item>
            <title>구글, 애플 인앱 영수증 결제 검증 웹 서비스 리뉴얼</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#주요-기능&quot; id=&quot;markdown-toc-주요-기능&quot;&gt;주요 기능&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#변경점&quot; id=&quot;markdown-toc-변경점&quot;&gt;변경점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#레포지토리&quot; id=&quot;markdown-toc-레포지토리&quot;&gt;레포지토리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺는말&quot; id=&quot;markdown-toc-맺는말&quot;&gt;맺는말&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;싸질러놓은&lt;/del&gt; 작성한 글 중에서 가장 자연유입이 많은 것은 &lt;a href=&quot;/2016/02/10/google-oauth/&quot;&gt;구글 인앱 결제 검증 웹 서비스 만들기&lt;/a&gt;와 &lt;a href=&quot;/2016/03/23/ios-validation/&quot;&gt;애플 인앱결제 검증 웹 서비스 제작&lt;/a&gt; 이다.&lt;/p&gt;

&lt;p&gt;그런데 이 글을 2016년에 작성되었고 그 코드는 3년이 넘게 그대로 방치 중이다. 그대로 사용하면 보안 위험이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리뉴얼할 수 있게 요청해준 순순스튜디오 고마워요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;node.js와 express.js는 그대로 유지하면서 변경해보았다.&lt;/p&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Google Play Store 인앱결제(in app billing) 검증
    &lt;ul&gt;
      &lt;li&gt;JWT 토큰 생성 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Apple App Store 인앱결제(in app purchase) 검증&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;게임에서 결제가 이뤄진 뒤 영수증을 각 url로 제출하면 정상 결제인지 확인한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;단, 데이터베이스에 영수증을 기록하는 기능은 없기때문에 정상 결제 1건을 가지고 복수번 결제 검증을 요청하는 중복 결제(duplicate payment)는 방어하지 못함.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;변경점&quot;&gt;변경점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;node.js v10.16 사용&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;TypeScript&lt;/code&gt; 사용&lt;/li&gt;
  &lt;li&gt;비동기 요청은 callback 에서 &lt;code&gt;async/await&lt;/code&gt; 로 변경&lt;/li&gt;
  &lt;li&gt;JSON Schema 를 통해서 request를 검증&lt;/li&gt;
  &lt;li&gt;요청 url 변경
    &lt;ul&gt;
      &lt;li&gt;/validation/iap/google&lt;/li&gt;
      &lt;li&gt;/validation/iap/apple&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;aws beanstalk 배포를 위한 packing 스크립트 추가&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dev&lt;/code&gt; 모드로 실행 시 아래 명령으로 실행
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;레포지토리&quot;&gt;레포지토리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/InAppPurchaseValidationWebService&quot;&gt;인앱 영수증 결제 검증 웹 서비스&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;살펴보시거나 사용하시다가 질문이 있으시면 해당 레포지토리의 이슈로 등록하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;맺는말&quot;&gt;맺는말&lt;/h2&gt;
&lt;p&gt;이런 서비스가 필요없는 신뢰 사회가 되길 바란다.&lt;/p&gt;
</description>
            <pubDate>Mon, 16 Sep 2019 09:01:00 +0900</pubDate>
            <link>https://blog.totu.dev/2019/09/16/renew-receipt-validation/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2019/09/16/renew-receipt-validation/</guid>
            
            
            <category>etc</category>
            
            <category>validation</category>
            
            <category>Billing</category>
            
            <category>iab</category>
            
            <category>iap</category>
            
            <category>nodejs</category>
            
            <category>TypeScript</category>
            
        </item>
      
    
      
        <item>
            <title>Tech야,놀자 준비 후기</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#준비-과정&quot; id=&quot;markdown-toc-준비-과정&quot;&gt;준비 과정&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#주제-정하기&quot; id=&quot;markdown-toc-주제-정하기&quot;&gt;주제 정하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#장소-예산&quot; id=&quot;markdown-toc-장소-예산&quot;&gt;장소, 예산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#디자인-의뢰&quot; id=&quot;markdown-toc-디자인-의뢰&quot;&gt;디자인 의뢰&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#행사-안내문-작성하기&quot; id=&quot;markdown-toc-행사-안내문-작성하기&quot;&gt;행사 안내문 작성하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sns-홍보-및-참가자-모객&quot; id=&quot;markdown-toc-sns-홍보-및-참가자-모객&quot;&gt;SNS 홍보 및 참가자 모객&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#발표-사항-체크&quot; id=&quot;markdown-toc-발표-사항-체크&quot;&gt;발표 사항 체크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#예비-발표-준비&quot; id=&quot;markdown-toc-예비-발표-준비&quot;&gt;예비 발표 준비&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#행사장-준비&quot; id=&quot;markdown-toc-행사장-준비&quot;&gt;행사장 준비&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#좌석-배치&quot; id=&quot;markdown-toc-좌석-배치&quot;&gt;좌석 배치&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#리셉션-스크린-음향&quot; id=&quot;markdown-toc-리셉션-스크린-음향&quot;&gt;리셉션, 스크린, 음향&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#음악과-기본-pt&quot; id=&quot;markdown-toc-음악과-기본-pt&quot;&gt;음악과 기본 PT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#기타-편의-제공&quot; id=&quot;markdown-toc-기타-편의-제공&quot;&gt;기타 편의 제공&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#행사-진행&quot; id=&quot;markdown-toc-행사-진행&quot;&gt;행사 진행&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#진행자와-관찰자&quot; id=&quot;markdown-toc-진행자와-관찰자&quot;&gt;진행자와 관찰자&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#사진-촬영-및-동영상-촬영&quot; id=&quot;markdown-toc-사진-촬영-및-동영상-촬영&quot;&gt;사진 촬영 및 동영상 촬영&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#행사-후&quot; id=&quot;markdown-toc-행사-후&quot;&gt;행사 후&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#만족도-설문&quot; id=&quot;markdown-toc-만족도-설문&quot;&gt;만족도 설문&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#자료-수집과-정리&quot; id=&quot;markdown-toc-자료-수집과-정리&quot;&gt;자료 수집과 정리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#회고-자리&quot; id=&quot;markdown-toc-회고-자리&quot;&gt;회고 자리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺는말&quot; id=&quot;markdown-toc-맺는말&quot;&gt;맺는말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#감사-인사&quot; id=&quot;markdown-toc-감사-인사&quot;&gt;감사 인사&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;한마디로 요약하자면 &lt;code&gt;행사 준비&lt;/code&gt;는 아무나 하는 게 아니었다. 첫 행사라서 그런지 세상 걱정이 모두 몰려들어 속이 다 울렁거렸다. 정신 건강만 생각하면 정말 함부로 시작하면 안 되는 거였다.&lt;/p&gt;

&lt;p&gt;첫 행사 기획 및 운영으로 많은 사람들을 힘들게 했지만 2회 차부터 이런 실수를 줄이고자 준비 후기를 남겨본다.&lt;/p&gt;

&lt;h2 id=&quot;준비-과정&quot;&gt;준비 과정&lt;/h2&gt;
&lt;p&gt;행사 뽐뿌가 가득 찼지만 무엇부터 해야 할지 몰랐다. 결론만 놓고만 실행 단계에서 무엇을 할지 몰라요보다 기획 단계에서 &lt;code&gt;주제&lt;/code&gt;가 무엇인지 모르는 게 더 문제였다.&lt;/p&gt;

&lt;h3 id=&quot;주제-정하기&quot;&gt;주제 정하기&lt;/h3&gt;
&lt;p&gt;처음 &lt;code&gt;Tech야,놀자&lt;/code&gt;를 기획했을 때는 나 스스로 주제가 명확하지 않았다. 밋업? 테크 톡? 갈피를 잡지 못했고 경험담을 들려줄지 기술 관련한 내용만 발표할지 구체적이지 않았다. 그러다 보니 발표자의 주제 선정도 헷갈리는 부분이 있고, 참가자의 기대 수준도 크게 달랐다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wanual.gitbook.io/wanual/a-to-z/undefined-4/undefined&quot;&gt;[행사기획] 행사기획의 기본&lt;/a&gt; 에도 잘 설명돼있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기획 의도가 명확하지 않아 강사, 참여자 모두 혼란스러웠던 행사로 끝이 났고, 글쓴이는 울며 그 날을 회고했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Tech야,놀자&lt;/code&gt;는 초기에 테크 톡이었다. 기술적인 내용을 담은 발표를 남기고 싶었다. 그런데 준비 과정에서 야놀자가 어떻게 일하는 지도 들려주고 싶어 졌다. 그러다 보니 밋업처럼 변질돼서 이도저도 아닌 게 되었다. 그럼에도 초기에 잡은 &lt;code&gt;Server-side Node.js with TypeScript&lt;/code&gt; 란 주제가 공표 되었다. 참가자 만족도 설문에서도 여실히 나타났다. 누군가는 일하는 방식을 들으러 왔고 누군가는 기술 발표를 기대하고 참가했더라.&lt;/p&gt;

&lt;p&gt;정말 짧게 요약할 수 있는 주제를 먼저 선정하자. 그러면 레퍼런스 찾기도 좋다.&lt;/p&gt;

&lt;h3 id=&quot;장소-예산&quot;&gt;장소, 예산&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Tech야,놀자&lt;/code&gt;의 경우 30~40명 규모의 작은 행사로 기획했다. &lt;del&gt;솔직히 30명도 못 채울까 봐 두려웠다.&lt;/del&gt; 인원 규모가 정해지자 장소 섭외는 일사천리로 진행되었다. 사내에 휴게 공간인 &lt;code&gt;For. REST&lt;/code&gt;를 사용할 수 있었기 때문이다. 그런데 이 장소에는 문제가 있다. 야놀자 본사 건물 1층을 통과해서 7층 &lt;code&gt;For. REST&lt;/code&gt;로 진입해 야하는데, 1층에서 방문자 확인이 돼야만 게이트를 통과할 수 있다. 원칙대로는 신원 확인 후 모두 방문증을 만들어야 했는데 19시 이후 행사라서 참석자 명단만 제출하면 안전팀이 통과시켜줬다. 다음에는 기회가 된다면 참가자 명찰을 만들어서 1층에서 배부하고 건물 안전팀이 이를 확인하고 게이트를 통과하면 조금 더 수월할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;For. REST&lt;/code&gt;는 사용 신청을 통해서 특정 날짜의 특정 시간을 사용할 수 있다. 그러니 행사를 기획한다면 미리미리 잡아두면 된다.&lt;/p&gt;

&lt;p&gt;예산은 많을수록 좋으나 유료 행사가 아니기 때문에 어디선가 받아와야만 한다. 이때 무엇에 사용할지 잘 정해야 한다. 초기에 &lt;code&gt;간식&lt;/code&gt; 정도만 제공할 생각이라서 굉장히 짜게 예산을 불렀는데 후에 행사를 준비할 때 보니 이 외에도 돈 들어갈 일이 많아서 굉장히 후회했다.&lt;/p&gt;

&lt;p&gt;아래는 제공한 것과 제공하지 못한 것을 업다운으로 표시해보겠다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;👍간식 및 다과 비용&lt;/li&gt;
  &lt;li&gt;👍스태프 명찰(개인비용)&lt;/li&gt;
  &lt;li&gt;👎X배너, 포스터 등 출력물&lt;/li&gt;
  &lt;li&gt;👎스태프 티셔츠&lt;/li&gt;
  &lt;li&gt;👎참가자 선물(급하게 피플파트너실 도움으로 지급)&lt;/li&gt;
  &lt;li&gt;👎발표자 선물&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;발표자 선물을 주지 못하더라도 참가자와 스태프 관련한 것은 뭐라도 더 챙겨야 했는데 생각도 못했다. 그리고 스태프 명찰은 CXPO실 유미리 님의 도움이 아니었으면 만들지도 못했다.&lt;/p&gt;

&lt;h3 id=&quot;디자인-의뢰&quot;&gt;디자인 의뢰&lt;/h3&gt;
&lt;p&gt;디자인 의뢰도 꼼꼼히 생각해야만 가능한 부분이었다. 페이스북으로 홍보하고 기술 블로그에 글만 적어서 내보낼 생각이었어서 의뢰를 몇 개 하지 못했는데 실상 들어가는 디자인이 많았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SNS 홍보용 이미지
    &lt;ul&gt;
      &lt;li&gt;페이스북, 트위터 등 원하는 규격이 다르고 노출하는 형식도 정해야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사이니지용 이미지
    &lt;ul&gt;
      &lt;li&gt;사내에 비치된 사이니지를 통해 노출할 수 있기 때문에 포스터 비용을 아낄 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기술 블로그 대표 이미지&lt;/li&gt;
  &lt;li&gt;안내 발송용 이메일 이미지
    &lt;ul&gt;
      &lt;li&gt;템플릿 작업을 했으면 참 좋았을 텐데 아쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참가 및 만족도 설문용 이미지
    &lt;ul&gt;
      &lt;li&gt;설문지 상단에 들어가는데 아무것도 없으면 낚시성 폼으로 보여서 오해하기 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;발표자용 PT 커버 이미지&lt;/li&gt;
  &lt;li&gt;스태프 명찰 이미지&lt;/li&gt;
  &lt;li&gt;참가자 명찰 이미지&lt;/li&gt;
  &lt;li&gt;행사장 안내 인쇄물 이미지&lt;/li&gt;
  &lt;li&gt;행사장 안내 PT 이미지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 중 실제로 의뢰하고 받은 것은 SNS 홍보용 이미지와 사이니지용 이미지였다. 만약 더 구체적인 그림을 알고 있었다면 일관되게 노출할 수 있었을 것 같은데 아쉽다.&lt;/p&gt;

&lt;p&gt;디자인 의뢰는 피플파트너실(HR)을 통해 제공받는데 이때도 어느 정도 양식이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주제&lt;/li&gt;
  &lt;li&gt;장소, 일시, 참석 대상자&lt;/li&gt;
  &lt;li&gt;이미지에 넣고자 하는 주요 사항들&lt;/li&gt;
  &lt;li&gt;디자인 컨셉&lt;/li&gt;
  &lt;li&gt;레퍼런스 이미지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 디자인 의뢰는 최소 2주 정도로 여유로운 게 좋다. 그래야 디자인 수신 후 수정 요청도 가능하고 디자이너도 편하게 작업할 수 있다. 많은 산출물을 얻고 싶다면 충분한 시간이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;행사-안내문-작성하기&quot;&gt;행사 안내문 작성하기&lt;/h3&gt;
&lt;p&gt;행사 안내는 모객 시점부터 필요하기 때문에 모객을 앞두고 반드시 작성해야 한다. 이때 이 안내문만 읽고 참석이 가능하게 유도하는 게 좋다. 이 부분을 놓쳐서 초기에 배포된 안내문이 매우 부실했다. 그렇다 보니 혼선이 발생했다. 그리고 참석자 선정 방식 등은 서술하지 않는 게 좋다. 이후 운영하면서 변경되는 부분까지 모두 대외적인 설명이 필요하다.&lt;/p&gt;

&lt;p&gt;다음 사항은 꼭 추가해야 하는 부분이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;소개글&lt;/li&gt;
  &lt;li&gt;일시 및 장소&lt;/li&gt;
  &lt;li&gt;신청방법&lt;/li&gt;
  &lt;li&gt;발표 내용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://yanolja.github.io/2019/07/tech_yanolja&quot;&gt;Tech야,놀자 안내문&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;특히나 발표가 있다면 이 부분이 핵심 컨텐츠이므로 모객에 큰 도움이 된다. 적어도 1개의 발표라도 간단한 소개 글을 받아서 넣어두도록 하자. 그리고 다른 행사의 안내문을 많이 봐두면 좋다. 준비 과정에서 급하게 찾느라고 여기저기서 본걸 짜깁기했더니 아주 누더기가 나왔다. ex 야놀자 멤버인 강미경(우아한 형제들)님의 도움이 아니었다면 안내문은 정말 폭망 수준이었다.&lt;/p&gt;

&lt;p&gt;기타 안내 부분도 별거 아니라고 생각하지 말고 꼼꼼히 적어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현장 등록 가능 여부&lt;/li&gt;
  &lt;li&gt;참가자 안내 방법&lt;/li&gt;
  &lt;li&gt;행사 당일 건물 내 이동 방법&lt;/li&gt;
  &lt;li&gt;간식이 식사를 대체할 수 있는지 혹은 외부 음식을 가지고 올 수 있는지 여부&lt;/li&gt;
  &lt;li&gt;주차 지원 여부&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외에도 필요하다고 생각되면 주저 말고 추가하자. 처음에는 주차 안내 하나 넣었는데 미경 님 조언으로 많이 챙길 수 있었다. 넣고 보니 다른 행사에도 이것저것 많이 쓰여있는 게 보인다.&lt;/p&gt;

&lt;h3 id=&quot;sns-홍보-및-참가자-모객&quot;&gt;SNS 홍보 및 참가자 모객&lt;/h3&gt;
&lt;p&gt;야놀자에서 개발자 관련한 홍보 채널은 Facebook의 &lt;a href=&quot;https://www.facebook.com/devyanolja/&quot;&gt;&lt;code&gt;개발자야,놀자&lt;/code&gt;&lt;/a&gt;가 전부다. 채널이 하나이니 공식적인 홍보는 이곳을 통해서 진행했다. 다만 글쓰기 권한을 가진 분을 찾느라고 고생했는데 다행히 마케팅팀 도움으로 권한을 얻었다. 현재는 다른 분께도 권한이 있어서 나보다 쉽게 공지 등을 올릴 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;SNS 홍보글에는 짧게 요약되는 글로 홍보하고 자세한 사항을 상세 안내문에 넣어서 링크했더니 편리했다. 매번 홍보글 수정할 필요 없이 안내문만 수정하면 되기 때문이다.&lt;/p&gt;

&lt;p&gt;그리고 참가자 모객은 구글 폼으로 받았다. 이때 들은 지적사항 중 하나가 구글 폼에도 적당한 안내 사항과 상세 안내문 링크가 있었으면 좋겠다는 것이었다. 다음에 행사를 진행하게 되면 반드시 폼에도 &lt;code&gt;안내문 링크&lt;/code&gt;를 넣고 전달해야겠다.&lt;/p&gt;

&lt;p&gt;무료 행사기 때문에 No Show가 얼마나 될지 몰랐다. 하여 목표 인원만큼만 사람을 받으려고 했는데 큰 오산이었다. ex 야놀자 멤버인 노현석(네이버) 님을 통해서 무료 행사 일 때 평균 얼마나 No Show가 얼마나 되는지 들었다. 무료 행사의 경우 &lt;code&gt;30~40%&lt;/code&gt; No Show가 있을 수 있고 비나 눈이 오면 더 높아질 수 있다고 들었다. 다행히 200% 이상 참가자 신청이 있어서 정원 대비 30% 인원을 더 참가자로 선정할 수 있었다. 당일 참석자를 카운트해보니 놀랍게도 30% No Show였다.&lt;/p&gt;

&lt;p&gt;한 가지 아쉬웠던 점은 직원분들이 직접 참가 신청을 하거나 지인을 초대하고 싶어했다. 최초에 기획단계에서 이를 고려해서 &lt;code&gt;일반 참가자&lt;/code&gt;와 &lt;code&gt;초대 참가자&lt;/code&gt;를 나눠 받아야겠다.&lt;/p&gt;

&lt;h3 id=&quot;발표-사항-체크&quot;&gt;발표 사항 체크&lt;/h3&gt;
&lt;p&gt;이번 행사를 준비할 때 가장 못한 부분이 이것이었다. 발표자 중 일찍 준비한 분이 있는가 하면 업무에 밀려서 늦게 준비한 분도 있었다. 이 부분을 미리 체크해서 데드라인을 만들었다면 발표 컨텐츠가 더 풍부했을 것 같다.&lt;/p&gt;

&lt;p&gt;3자를 통해 어떤 부분을 추가해야 할지 알아가는 &lt;code&gt;발표 리뷰&lt;/code&gt;를 마련해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;예비-발표-준비&quot;&gt;예비 발표 준비&lt;/h3&gt;
&lt;p&gt;진행에 따라 갑자기 시간이 늘어지거나 짧아지는 변수가 있다. &lt;code&gt;Tech야,놀자&lt;/code&gt;는 앞의 2 세션이 빨리 끝나서 시간이 많이 생겼다. 이때 예비 발표가 있었다면 정말 매끄럽게 진행될 수 있었겠다.&lt;/p&gt;

&lt;p&gt;당시 현장에서 갑작스럽게 채용 관련 QnA를 진행했어서 세션을 맡아주신 분이 많이 당황했다. 듣는 분들도 만족스럽지 못했다 꼭 하나쯤 미리 준비해두자.&lt;/p&gt;

&lt;h2 id=&quot;행사장-준비&quot;&gt;행사장 준비&lt;/h2&gt;
&lt;p&gt;행사 당일에는 어떤 준비를 해야 할까? 사실 리셉션에 컴퓨터 올려두고 간식만 준비하면 될 줄 알았다. 실제로 할 일은 더 많았다.&lt;/p&gt;

&lt;h3 id=&quot;좌석-배치&quot;&gt;좌석 배치&lt;/h3&gt;
&lt;p&gt;야놀자의 &lt;code&gt;For REST&lt;/code&gt;는 평소에 휴게 공간처럼 사용된다. 하여 좌석배치가 발표하기에 적합하지 않았다. 추가 의자가 꽤 많이 준비되어있으니 미리 올라가서 자리를 깔아야 한다. 그리고 행사 성격에 따라 테이블이나 소파를 활용하면 좋겠다. 소파를 좌석으로 사용했더니 굉장히 편안해 보여서 좋았다.&lt;/p&gt;

&lt;p&gt;준비가 어느 정도 되었을 때 빈자리를 찍어서 홍보 채널로 올려두자.&lt;/p&gt;

&lt;h3 id=&quot;리셉션-스크린-음향&quot;&gt;리셉션, 스크린, 음향&lt;/h3&gt;
&lt;p&gt;리셉션에 홍보물이나 간식 등을 비치한다. 입구에서 바로 보이는 자리라서 큰 혼란 없이 등록이 이뤄졌다. 동선을 안내하는 포스터나 PT가 없어서 아쉬웠다.&lt;/p&gt;

&lt;p&gt;마이크와 음향 상태, 스크린은 발표자와 함께 미리미리 확인했으면 더 좋았겠다. 당일날 확인했더니 스크린에 글자가 얼마나 크게 나오는지 확인했을 때 전체 슬라이드를 수정하기에는 시간이 너무 빠듯했다. 그래서 가독성이 떨어지게 작은 폰트가 사용되기도 했고, 스크린 출력 시 대비가 약하여 읽을 수 없는 글자도 있었다. 되도록 80pt이상 큰 글자 사용을 권한다.&lt;/p&gt;

&lt;h3 id=&quot;음악과-기본-pt&quot;&gt;음악과 기본 PT&lt;/h3&gt;
&lt;p&gt;행사장에 진입했을 때 아무런 소리가 나지 않으면 분위기가 너무 빡빡했다. 다행히 스태프 중에 블루투스 스피커가 있어서 하우스 음향 외로 음악을 틀 수 있었다. 미리 플레이 리스트까지 확보하면 더 좋았겠다.&lt;/p&gt;

&lt;p&gt;행사장 안에서 참가자가 알아야 하는 정보는 기본 PT를 만들어서 반복시키면 된다. 이걸 모르고 있다가 당일 올라가 보니 아무것도 없는 게 너무 휑해서 만들었다. 디자인도 이상하고 오타도 났다. 미리미리 체크해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;기타-편의-제공&quot;&gt;기타 편의 제공&lt;/h3&gt;
&lt;p&gt;쓰레기통이 준비되어있지만 여분의 박스 등을 깔아서 추가로 쓰레기를 버릴 수 있게 유도하는 게 좋았다. 기존에 준비된 쓰레기통으로 40명 인원의 쓰레기를 받기에는 조금 모자 라보였다.&lt;/p&gt;

&lt;p&gt;에어컨이 특정 시간이 되면 꺼지는 것 같았다. 40명이 모이니 금방 더워졌다. 다행히 에어컨 리모컨이 비치되어있다. 에어컨 작동 여부를 확인하고 조치해야 한다. 당일 더운지 몰랐는데 행사에 참석했던 분이 알려줘서 에어컨을 켜게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;행사-진행&quot;&gt;행사 진행&lt;/h2&gt;
&lt;p&gt;행사 진행은 순서 안내만 있으면 충분할 것으로 생각했다. 하지만 앞서 말한 에어컨 미동작 같은 문제가 발생한다.&lt;/p&gt;

&lt;h3 id=&quot;진행자와-관찰자&quot;&gt;진행자와 관찰자&lt;/h3&gt;
&lt;p&gt;행사가 타임 테이블과 같이 진행되지 않더라. 각종 변수가 생긴다. 이때 안정적으로 상황을 정리하고 알려주는 진행자가 필요하다. 다행히 스태프 중 진행을 맡아주시는 분이 있었다. 인원이 부족해도 이 일만 챙기는 분을 꼭 지정해두자.&lt;/p&gt;

&lt;p&gt;그리고 진행자가 보는 시선과 다르게 전체를 바라보는 관찰자가 필요하다. 돌발 상황을 인지하고 지시를 내려야 한다. 발표도 함께 준비하느라 이 부분을 소홀히 했더니 참가자들이 어떤 상태인지 파악이 되지 않았다. 이 부분은 스태프와 미경 님의 도움이 정말 컸다.&lt;/p&gt;

&lt;h3 id=&quot;사진-촬영-및-동영상-촬영&quot;&gt;사진 촬영 및 동영상 촬영&lt;/h3&gt;
&lt;p&gt;사진이나 동영상을 기록해두면 좋다. 사진은 생각지 못하고 있었는데 스태프 유용우 님(CX개발실)이 자발적으로 촬영해줘서 그나마 기록을 가지게 되었다. 되도록 스태프 중 사진 촬영만 담당할 사람을 섭외하면 좋겠다. 반드시 좋은 카메라가 아니어도 된다. 사진이 없는 것보다 휴대전화로 찍은 사진이라도 있는 게 좋다.&lt;/p&gt;

&lt;p&gt;발표를 기록하는 동영상 촬영은 휴대전화로 했다. 나쁘지는 않았는데 휴대전화 배터리 문제가 있었다. 하여 근접에서 촬영한 영상중 하나는 못쓰게 되었다. 그러니 미리미리 보조 배터리를 챙겨둬야 한다. 세션만큼 기록했을 때 저장 공간이 무리 없는지도 미리 촬영해서 체크해볼 필요가 있었다. 다행히 저장 공간은 충분했지만 체크하지 못했다면 영상 전체를 잃을 뻔했다.&lt;/p&gt;

&lt;p&gt;촬영하는 스태프는 전문성이 있으면 좋겠지만 없어도 레코드 시작과 끝만 누를 수 있으면 충분하니 전담할 수 있도록 해주자.&lt;/p&gt;

&lt;h2 id=&quot;행사-후&quot;&gt;행사 후&lt;/h2&gt;
&lt;p&gt;행사가 마무리되면 빠르게 참석자가 엘리베이터를 이용해서 빠져나간다. 이때 혹시 놓고 간 물건은 없는지 빨리 확인해야겠다. 간혹 물건을 두시고 갈 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;장소 정리하는 일이 필요한데 장소 배치를 크게 바꾸지 않으면 복구도 금방 된다. 또한 일손이 많으면 빠르다. 회사에서 진행할 때는 스태프가 아니라도 동료의 힘을 빌릴 수 있어서 빨리할 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;만족도-설문&quot;&gt;만족도 설문&lt;/h3&gt;
&lt;p&gt;만족도 설문을 미리 만들어두고 원하는 채널로 작성을 부탁하자. 사실 참석자 설문보다 월등히 적은 수가 수집되지만 의견을 직접 들을 수 있어 도움이 된다. 꼭 미리 준비해서 행사 후 짧은 시간 안에 발송하자. 참석자 시간이 지나면 귀찮아져서 설문을 더 안 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;자료-수집과-정리&quot;&gt;자료 수집과 정리&lt;/h3&gt;
&lt;p&gt;사진이나 동영상은 되도록 행사 당일이나 다음날 모아서 공유 폴더에 모으면 좋다. 다행히 스태프들이 알아서 공유해줘서 팀 구글 드라이브에 저장할 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;회고-자리&quot;&gt;회고 자리&lt;/h3&gt;
&lt;p&gt;행사가 끝났으니 스태프와 함께 회고해야 한다. 일이 끝나고 너무 늦게 잡으면 일을 잊을 수 있다고 하니 최소 1주일 안에 진행하자. &lt;code&gt;Tech야,놀자&lt;/code&gt; 회고는 행사 후 2일 뒤에 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;맺는말&quot;&gt;맺는말&lt;/h2&gt;
&lt;p&gt;돌이켜보면 정말 많은 분들의 힘으로 진행한 첫 행사다. 이렇게 많은 일이 일어날지 꿈에도 몰랐다. 참석자가 모두 오기는 할지 불안에 떨었고 행사가 끝나자 피드백을 보면서 피눈물을 흘리기도 했다. 하지만 어쩌랴. 내가 부족한 탓인 것을.&lt;/p&gt;

&lt;p&gt;그래도 동료 덕분에 너무 감동받았다. 너무 피곤했지만 집에 가서 아내에게 감동을 전하느라 일하는 아내를 괴롭혔을 정도다. 이렇게 적극적인 동료들이 주위에 있다는 점이 너무 행복했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;감사-인사&quot;&gt;감사 인사&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;행사 준비에 컨설팅해주고 당일에도 많은 부분을 챙겨준 ex 야놀자 멤버 강미경 님&lt;/li&gt;
  &lt;li&gt;작두 위에서 내려온 듯한 No Show 조언해 주신 ex 야놀자 멤버 노현석 님&lt;/li&gt;
  &lt;li&gt;행사 준비 시작부터 끝까지 잘 챙겨주신 윤하영 님&lt;/li&gt;
  &lt;li&gt;이름표며 촬영용 삼각대며 말하지 않아도 챙겨준 유미리 님&lt;/li&gt;
  &lt;li&gt;발표 듣고 싶었을 텐데 궂은일 하느라 수고한 이태현 님, 양문규 님, 유용우 님&lt;/li&gt;
  &lt;li&gt;집도 먼데 당일 갑자기 일손을 빌려주신 김연지 님&lt;/li&gt;
  &lt;li&gt;리셉션에서 활약해주신 김수연 님&lt;/li&gt;
  &lt;li&gt;바쁜 일정에도 발표자로 참여해주신 박선영 님, 이병준 님&lt;/li&gt;
  &lt;li&gt;이 행사가 있기까지 물심양면으로 지원해주신 최성일 님&lt;/li&gt;
  &lt;li&gt;행사 준비에 여러모로 도와주신 김우리 님, 김지현 님&lt;/li&gt;
  &lt;li&gt;바쁜 일정에도 디자인해주시느라 고생하신 김하람 님&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 당일 도와주신 많은 분들 정말 감사합니다. 이렇게 많은 도움을 받을 수 있을지 생각도 못했습니다. 여러분이 있어 정말 행복했습니다. 다음에도 잘 부탁드립니다.&lt;/p&gt;
</description>
            <pubDate>Thu, 25 Jul 2019 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2019/07/25/tech_yanolja_postmortem/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2019/07/25/tech_yanolja_postmortem/</guid>
            
            
            <category>etc</category>
            
        </item>
      
    
      
        <item>
            <title>30인 규모팀의 커피 주문하기 - 커피투게더</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#커피-주문의-문제&quot; id=&quot;markdown-toc-커피-주문의-문제&quot;&gt;커피 주문의 문제&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#문제-정리&quot; id=&quot;markdown-toc-문제-정리&quot;&gt;문제 정리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#신기능-제작&quot; id=&quot;markdown-toc-신기능-제작&quot;&gt;신기능 제작!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1일-차---api-개발&quot; id=&quot;markdown-toc-1일-차---api-개발&quot;&gt;1일 차 - api 개발&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2일-차---화면-개발&quot; id=&quot;markdown-toc-2일-차---화면-개발&quot;&gt;2일 차 - 화면 개발&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#운영-기록&quot; id=&quot;markdown-toc-운영-기록&quot;&gt;운영 기록&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#리팩토링&quot; id=&quot;markdown-toc-리팩토링&quot;&gt;리팩토링&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;
&lt;p&gt;조직 생활을 하다보면 커피(차) 한 잔하며 휴식하는 일이 생긴다. 도란 도란 얘기도 나누고 새로온 사람과 인사도 나눌 수 있는 꼭 필요한 시간이다. 하지만 팀 규모가 10인을 넘으면 주문이 일이다. 야놀자의 범 CX실(CXPO, CXDEV)은 2019년 1/4분기에 30명이 넘어갔다. 와아~&lt;/p&gt;

&lt;h2 id=&quot;커피-주문의-문제&quot;&gt;커피 주문의 문제&lt;/h2&gt;
&lt;p&gt;커피 주문은 간단하다. 원하는 주문을 말하고 계산하면 된다.  하지만 사람이 많아지면 주문을 모으는 일이 힘들다. 아래 예시를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/coffeeorder/coffee_order_01.jpg&quot; alt=&quot;주문예시&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CX실의 규칙은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자신이 주문할 메뉴가 있는지 쓰레드를 살핀다.&lt;/li&gt;
  &lt;li&gt;주문이 없다면 신규 메뉴를 쓰레드에 남긴다.&lt;/li&gt;
  &lt;li&gt;혼자만 주문했어도 반드시 ✋ 이모지를 남겨서 카운트하기 쉽도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 예시에서 &lt;code&gt;아이스 아메리카노&lt;/code&gt; 를 살펴보자. 샷을 추가하가한 메뉴와 &lt;code&gt;아이스아메&lt;/code&gt; 라고 따로 등록한 것까지 비슷한 주문이 흩어져있다. 또 아이스아메는 ✋이모지가 없다. 신규 입사자가 늘어나면서 규칙 전파가 잘 안된다고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;주문 몇 잔인지 체크하기도 어렵다. 또 실제 주문 중인데 주문이 바뀌는 일도 가능하다. 주문에 성공해도 어떤게 내 주문인지 확인하기 어려웠다.&lt;/p&gt;

&lt;h3 id=&quot;문제-정리&quot;&gt;문제 정리&lt;/h3&gt;

&lt;p&gt;위 문제를 해결하는 방법을 정리해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 주문을 누적해서 표시&lt;/li&gt;
  &lt;li&gt;총 몇 잔인지 합계 표시&lt;/li&gt;
  &lt;li&gt;특정 시점에서 주문을 종료하여 변경 불가능하도록 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신기능-제작&quot;&gt;신기능 제작!&lt;/h2&gt;

&lt;p&gt;CX실에는 &lt;a href=&quot;https://yanolja.github.io/2018/09/Work-Log&quot;&gt;워크로그 개발기&lt;/a&gt;가 기 개발된 상태였다. 곧 CX실 인원이 커피 주문을 하는 서비스라면 &lt;code&gt;워크로그&lt;/code&gt;에 새로운 기능을 추가하면 될 터!&lt;/p&gt;

&lt;h3 id=&quot;1일-차---api-개발&quot;&gt;1일 차 - api 개발&lt;/h3&gt;

&lt;p&gt;커피(차) 한 잔 하는 하는 휴식을 &lt;code&gt;이벤트&lt;/code&gt;로 생각했다. 이벤트에 주최자와 참석자를 특정할 수 있다. 그리고 이벤트는 &lt;code&gt;주문&lt;/code&gt;을 가질 수 있다. 주문은 &lt;code&gt;음료&lt;/code&gt; id를 특정하는데 이때 주문자의 - 휘핑 없이같은 - 옵션을 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/coffeeorder/coffee_order_db.png&quot; alt=&quot;주문db&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개략적인 구조는 저렇다. 이를 바탕으로 &lt;code&gt;이벤트&lt;/code&gt;, &lt;code&gt;주문&lt;/code&gt;, &lt;code&gt;참가자&lt;/code&gt;, &lt;code&gt;음료&lt;/code&gt;에 관한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; api를 제작했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET /events 이벤트 목록&lt;/li&gt;
  &lt;li&gt;POST /events 이벤트 등록&lt;/li&gt;
  &lt;li&gt;GET /events/:event_id 이벤트 정보&lt;/li&gt;
  &lt;li&gt;PUT /events/:event_id 이벤트 수정&lt;/li&gt;
  &lt;li&gt;GET /events/:event_id/guests 참가자 목록&lt;/li&gt;
  &lt;li&gt;POST /events/:event_id/guests 참가자 등록&lt;/li&gt;
  &lt;li&gt;GET /events/:event_id/orders 주문 목록&lt;/li&gt;
  &lt;li&gt;POST /events/:event_id/orders 주문 추가 및 갱신&lt;/li&gt;
  &lt;li&gt;DELETE /events/:event_id/orders/:guest_id 주문 삭제&lt;/li&gt;
  &lt;li&gt;GET /beverages 음료 목록&lt;/li&gt;
  &lt;li&gt;POST /beverages 음료 등록&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;추가로 사내 메신저인 &lt;a href=&quot;https://slack.com/&quot;&gt;슬랙&lt;/a&gt; 데이터를 워크로그 DB에 등록한 상태이므로 &lt;code&gt;참가자&lt;/code&gt; 에게 메시지 발송하는 기능도 추가했다.&lt;/p&gt;

&lt;h3 id=&quot;2일-차---화면-개발&quot;&gt;2일 차 - 화면 개발&lt;/h3&gt;
&lt;p&gt;개발한 화면은 총 3개다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체 &lt;code&gt;이벤트&lt;/code&gt; 목록 출력 페이지&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;이벤트&lt;/code&gt; 등록 페이지&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;이벤트&lt;/code&gt; 상세 페이지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;재사용가능한 컴포넌트가 별로 없어서 새로 만들었지만 구현이 간단한 편이라서 생각보다 빨리 완료했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;워크로그는 razzle + after.js + react.js + mobx 기반&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/coffeeorder/quickquick.png&quot; alt=&quot;뚝딱맨&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;운영-기록&quot;&gt;운영 기록&lt;/h2&gt;

&lt;p&gt;2일 간의 가열찬 개발 후 대망의 서비스 오픈!!&lt;/p&gt;

&lt;figure class=&quot;large&quot;&gt;
  &lt;div class=&quot;myvideo&quot;&gt;
     &lt;video style=&quot;width:50%&quot; controls=&quot;&quot; loop=&quot;loop&quot;&gt;
         &lt;source src=&quot;/images/coffeeorder/i_love_coffee.mp4&quot; type=&quot;video/mp4&quot; /&gt;
     &lt;/video&gt;
  &lt;/div&gt;
&lt;figcaption&gt;커피 주문 동작예시&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;CX실 채널에서 크게 환영받았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/coffeeorder/coffee_order_launch.png&quot; alt=&quot;서비스오픈&quot; /&gt;&lt;/p&gt;

&lt;p&gt;손쉽게 끝날줄 알았지만 데이터베이스(Database)가 터진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/coffeeorder/coffee_order_error.jpg&quot; alt=&quot;서비스에러&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;돈으로 막을 수 있는건 돈으로 막는게 최고! Firebase를 유료 모델로 올려서 첫날 서비스를 마쳤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;최소 기능만 가지고 서비스를 강행 오픈했을 때 참사를 경험&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;리팩토링&quot;&gt;리팩토링&lt;/h3&gt;

&lt;p&gt;가만 보니 사용자 전체 목록 조회 부분과 이벤트 내 주문, 음료 목록 전체 로딩을 매번 새롭게 하고 있었다. 변경(Create, Update, Delete)발생할 때만 새롭게 데이터를 읽어서 서버 인메모리에 저장한다. 평소의 읽기는 인메모리 캐시를 먼저 확인하고 비었으면 데이터베이스로부터 데이터를 읽도록 했다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;이 후 자잘한 업데이트 중이다. 죽었던 다른 기능을 살리고, 불편 사항을 접수해서 개선하기도 한다. &lt;code&gt;토이 프로젝트&lt;/code&gt;는 재미있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/totuworld/time-recorder-viewer&quot;&gt;워크로그 레포지토리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Wed, 17 Apr 2019 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2019/04/17/coffeetogether/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2019/04/17/coffeetogether/</guid>
            
            
            <category>etc</category>
            
        </item>
      
    
      
        <item>
            <title>아빠 왜 집에서 일해요? (feat. aws)</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#어플리케이션의-미동작-확인&quot; id=&quot;markdown-toc-어플리케이션의-미동작-확인&quot;&gt;어플리케이션의 미동작 확인&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#어디가-문제야&quot; id=&quot;markdown-toc-어디가-문제야&quot;&gt;어디가 문제야?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#복구-작업&quot; id=&quot;markdown-toc-복구-작업&quot;&gt;복구 작업&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#그렇다면-내가-직접-설치해주지&quot; id=&quot;markdown-toc-그렇다면-내가-직접-설치해주지&quot;&gt;그렇다면 내가 직접 설치해주지!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;AWS의 PaaS(Platform as a Service)인 Elastic Beanstalk(이하 Beanstalk)로 node.js 어플리케이션을 배포/운영하고 있다. 로컬이나 dev 환경에서 작동을 확인한 배포판이 production 환경으로 배포만 하면 npm install 시 문제를 발생시킨다?!. 이때 어떻게 대처했는지 기록을 남긴다.&lt;/p&gt;

&lt;h2 id=&quot;어플리케이션의-미동작-확인&quot;&gt;어플리케이션의 미동작 확인&lt;/h2&gt;
&lt;p&gt;크론잡(cronjob)처럼 일정 주기로 정해진 일을 처리하는 어플리케이션이 있다. 해당 어플리케이션은 각각의 테스크를 수행하고 슬랙의 특정 채널에 결과를 남긴다. 그런데 production 환경의 메시지가 사라졌다.&lt;/p&gt;

&lt;h3 id=&quot;어디가-문제야&quot;&gt;어디가 문제야?&lt;/h3&gt;
&lt;p&gt;Beanstalk 환경에 접속해서 node.js 로그를 확인해봤다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## nodejs 로그를 확인
$ tail /var/log/nodejs/nodejs.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;production 배포판이 특정 패키지를 찾을 수 없어서 시작단계에서 실패하고 있었다. 최근 로그 100줄을 다운받아 확인해보니 npm install 시 특정 패키지를 설치하는데 실패한 기록이 있었다. 개발 환경을 배포한 배포판과 같은 commit으로 돌리고 패키지 설치를 진행해보니 실제로 패키지가 없었다. 어떤 과정에서 누가 패키지를 삭제했는지 모르겠지만 일단 production 환경을 살리자!&lt;/p&gt;

&lt;h2 id=&quot;복구-작업&quot;&gt;복구 작업&lt;/h2&gt;
&lt;p&gt;우선 문제가 된 패키지의 상위 버전이 있는지 확인해서 설치했다. 그리고 npm audit 에서 문제로 지적된 몇몇 패지키지도 업데이트했다. 그리고 배포판을 만들어서 dev 환경으로 뿌렸더니 잘 된다. 그런데 production으로 배포해보니 실패를 거듭했다. 역시 패키지 설치단계에서 에러를 반환하고 특정 패키지가 없다는 에러를 내고 있었다.&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-내가-직접-설치해주지&quot;&gt;그렇다면 내가 직접 설치해주지!&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;eb cli&lt;/code&gt;로 Beanstalk 환경에 접속한 뒤 아래처럼 실행했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## sudo 권한 획득
$ sudo su

## 설치된 nodejs 버전 보기. 10.13 버전이 있는지 확인하는 용도
$ ls /opt/elasticbeanstalk/node-install

## path 설정
$ export PATH=$PATH:/opt/elasticbeanstalk/node-install/node-v10.13.0-linux-x64/bin/

## 소스코드 있는 곳
$ cd /var/app/current

## package 설치!
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;직접 패키지를 설치했더니 문제없이 잘 설치되었다. 이제 남은건 node 프로세스를 재시작하는 것!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## node 프로세스 kill (sudo 권한 필요)
$ pkill -f node

## 프로세스 list 확인
$ initctl list

## nodejs 서비스 시작
$ initctl start nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 Beanstalk의 health check을 지켜보거나 node.js 로그를 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## nodejs 로그를 확인
$ tail /var/log/nodejs/nodejs.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;출근해서 왜 문제가 되었나 살펴봤더니 dev와 production 환경의 node.js 플랫폼 버전이 달랐다. 버전을 맞추니 모든 문제가 사라졌다. 역시 기본이 제일 중요하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아빠가 집에와서 일하느라 놀아주지 못해서 미안해~ 😭&lt;/p&gt;
&lt;/blockquote&gt;
</description>
            <pubDate>Wed, 09 Jan 2019 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2019/01/09/aws-beanstalk/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2019/01/09/aws-beanstalk/</guid>
            
            
            <category>aws</category>
            
        </item>
      
    
      
        <item>
            <title>3분 게임 서버(Firebase) 진행사항 1</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2018년은-뭘&quot; id=&quot;markdown-toc-2018년은-뭘&quot;&gt;2018년은 뭘?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#진행-사항&quot; id=&quot;markdown-toc-진행-사항&quot;&gt;진행 사항&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#다음-주제&quot; id=&quot;markdown-toc-다음-주제&quot;&gt;다음 주제&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺음말&quot; id=&quot;markdown-toc-맺음말&quot;&gt;맺음말&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;2018년 1/4분기는 어떻게 지났는지 모르겠다. 그냥 정신차리고보니 3월 30일이다.&lt;/p&gt;

&lt;h2 id=&quot;2018년은-뭘&quot;&gt;2018년은 뭘?&lt;/h2&gt;
&lt;p&gt;2017년 3월에 &lt;a href=&quot;https://github.com/totuworld/Wendy&quot;&gt;Wendy 프로젝트&lt;/a&gt; 첫번째 파트를 종료했다. &lt;del&gt;그리고 해당 프로젝트는 장렬하게 산화했다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;그후 여러가지 핑계로 2017년은 별 활동없이 지나갔다. 2018년은 무엇을할지 고민하다 순순이의 추천과 때마침 시작된 Firebase 스터디 덕분에 Firebase로 방향을 잡았다.&lt;/p&gt;

&lt;p&gt;Unity 3D로 게임 클라이언트를 제작하는 클라이언트 프로그래머가 간단히 사용할 수 있는 게임 서버 제작을 연재해볼까 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;일은 내가 안해요. Google이 해요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;진행-사항&quot;&gt;진행 사항&lt;/h3&gt;
&lt;p&gt;Firebase 스터디에서 첫 주제로 인증(Auth)을 다뤄서 아래 2개의 글을 작성했다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.totu.dev/2018/03/22/firebaseandunity-01/&quot;&gt;3분 게임 서버(Firebase) - Auth 익명 로그인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.totu.dev/2018/03/22/firebaseandunity-02/&quot;&gt;3분 게임 서버(Firebase) - Auth 소셜 로그인&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다음-주제&quot;&gt;다음 주제&lt;/h3&gt;
&lt;p&gt;다음 주제는 데이터베이스(Realtime Database)이다. Unity로 로또를 할 수 있게 클라이언트를 만들고 데이터 관리를 다루려고 한다. 게임 만드는 과정은 통째로 넘어가버릴 것이고 - 클라이언트 안한지 오래되어 수준이 아주 낮아 - 데이터베이스만 다루려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lotto_proto_01.gif&quot; alt=&quot;프로토타입수준실화냐&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이거 만든다고 5시간 썼다면 믿으시겠습니까!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;맺음말&quot;&gt;맺음말&lt;/h2&gt;
&lt;p&gt;미래의 토투가 해야할 일이 밀린 회사와 6월말 출산을 앞둔 2/4분기. 과연 얼마나 글을 진행할 수 있을까. 미래의 토투 힘내라.&lt;/p&gt;
</description>
            <pubDate>Fri, 30 Mar 2018 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2018/03/30/report/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2018/03/30/report/</guid>
            
            
            <category>firebase</category>
            
        </item>
      
    
      
        <item>
            <title>3분 게임 서버(Firebase) - Auth 소셜 로그인</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#준비-과정&quot; id=&quot;markdown-toc-준비-과정&quot;&gt;준비 과정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#facebook-로그인&quot; id=&quot;markdown-toc-facebook-로그인&quot;&gt;Facebook 로그인&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로그래밍-준비&quot; id=&quot;markdown-toc-프로그래밍-준비&quot;&gt;프로그래밍 준비&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#facebook-로그인-구현&quot; id=&quot;markdown-toc-facebook-로그인-구현&quot;&gt;Facebook 로그인 구현&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#디버깅&quot; id=&quot;markdown-toc-디버깅&quot;&gt;디버깅&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;지난 시간에 다룬 &lt;a href=&quot;https://blog.totu.dev/2018/03/22/firebaseandunity-01/&quot;&gt;익명 로그인&lt;/a&gt;은 기본이다. 익명 로그인은 Apple의 앱스토어 검수 조건에도 해당한다.&lt;/p&gt;

&lt;p&gt;사용자가 선택할 수 있는 그 다음 선택지는 소셜 로그인이다. 비밀번호와 같은 자산이 Facebook이나 Google 등 대형 회사가 관리되니 안심되고 설령 게임을 지워도 다시 데이터를 복원을 기준을 제공해주기 때문이다.&lt;/p&gt;

&lt;p&gt;Firebase 인증은 Google, Play 게임(구글 플레이), Facebook, Twitter, Github 등의 로그인이 가능하다. 그 중 여기서는 페이스북 로그인을 다뤄보겠다.&lt;/p&gt;

&lt;h2 id=&quot;준비-과정&quot;&gt;준비 과정&lt;/h2&gt;
&lt;p&gt;Firebase 인증의 &lt;code&gt;로그인 방법&lt;/code&gt;에 Facebook을 등록해야한다. 그러기위해서는 Facebook에 앱을 생성해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/apps/&quot;&gt;facebook for developers의 앱 대시보드&lt;/a&gt;에 접속 한 뒤 &lt;code&gt;새 앱 추가&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_01.png&quot; alt=&quot;새 앱 추가&quot; width=&quot;10%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;표시할 이름과 연락처 이메일을 등록한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_02.png&quot; alt=&quot;새 앱 ID만들기 입력&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이스북 앱의 대시보드 중 &lt;code&gt;Facebook 로그인&lt;/code&gt;의 &lt;code&gt;설정&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_03.png&quot; alt=&quot;Facebook 로그인 설정&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이제 &lt;code&gt;빠른 시작&lt;/code&gt; 절차가 시작된다. 이를 무시하고 좌측 메뉴에서 &lt;code&gt;설정&lt;/code&gt; - &lt;code&gt;기본 설정&lt;/code&gt;을 클릭하여 &lt;code&gt;앱 ID&lt;/code&gt;와 &lt;code&gt;앱 시크릿 코드&lt;/code&gt;를 확인한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_05.png&quot; alt=&quot;설정 - 기본 설정&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_06.png&quot; alt=&quot;앱 ID와 앱 시크릿 코드 확인&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하단의 &lt;code&gt;+ 플랫폼 추가&lt;/code&gt; 버튼을 클릭하고 iOS나 Android 등의 플랫폼을 선택한다(여기서는 iOS를 기준으로 설명한다). &lt;code&gt;번들 ID&lt;/code&gt;를 입력한다. 다 입력하면 하단의 &lt;code&gt;변경 내용 저장&lt;/code&gt;을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_07.png&quot; alt=&quot;iOS 번들 ID 입력&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이제 아대시보드로 접속하여 &lt;code&gt;로그인 방법&lt;/code&gt;탭을 선택한 뒤 &lt;code&gt;Facebook&lt;/code&gt;을 클릭한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;사용 설정&lt;/code&gt;을 클릭하고 앞서 확인한 &lt;code&gt;앱 ID&lt;/code&gt;와 &lt;code&gt;앱 시크릿 코드&lt;/code&gt;를 입력한다. &lt;code&gt;OAuth 리디렉션 URI&lt;/code&gt;를 복사한다(복사 아이콘 클릭)하고 &lt;code&gt;저장&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_08.png&quot; alt=&quot;앱 ID, 앱 시크릿 코드 입력&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;facebook for developers 대시보드로 돌아가서 복사한 &lt;code&gt;OAuth 리디렉션 URI&lt;/code&gt;를 &lt;code&gt;Facebook 로그인&lt;/code&gt; - &lt;code&gt;설정&lt;/code&gt;에서 &lt;code&gt;유효한 OAuth 리디렉션 URI&lt;/code&gt;에 붙여넣고 &lt;code&gt;변경 내용 저장&lt;/code&gt;을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_09.png&quot; alt=&quot;좌측 메뉴의 Facebook 로그인 - 설정&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_01_10.png&quot; alt=&quot;유효한 OAuth 리디렉션 URI 입력&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;facebook-로그인&quot;&gt;Facebook 로그인&lt;/h2&gt;

&lt;p&gt;Facebook 로그인도 익명 로그인과 비슷한 절차로 진행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자) Facebook 로그인 버튼 클릭&lt;/li&gt;
  &lt;li&gt;게임 클라이언트) Facebook SDK를 활용해서 로그인 화면 표시&lt;/li&gt;
  &lt;li&gt;사용자) 로그인 진행&lt;/li&gt;
  &lt;li&gt;Facebook) access token 반환&lt;/li&gt;
  &lt;li&gt;게임 클라이언트) access token을 Firebase 인증 SDK를 통해 등록&lt;/li&gt;
  &lt;li&gt;Firebase) 사용자 등록 과정 진행&lt;/li&gt;
  &lt;li&gt;게임 클라이언트) 고유한 사용자 ID를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로그래밍-준비&quot;&gt;프로그래밍 준비&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://blog.totu.dev/2018/03/22/firebaseandunity-01/&quot;&gt;익명 로그인&lt;/a&gt;을 진행했다면 그 프로젝트를 이어서 사용해도 무방하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아래 프로젝트 파일을 다운받는다.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/firebase_toturial/archive/auth_guest.zip&quot;&gt;샘플 프로젝트&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/docs/unity&quot;&gt;Facebook SDK for Unity&lt;/a&gt;로 접속해서 Facebook Unity SDK를 다운로드한다(작성일 기준 v7.11.1).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unity 2017.3를 실행한 뒤 샘플 프로젝트를 열고 &lt;a href=&quot;https://blog.totu.dev/2018/03/22/firebaseandunity-01/#프로젝트-설정&quot;&gt;익명 로그인&lt;/a&gt;의 &lt;code&gt;프로젝트 설정&lt;/code&gt; 부분을 참고하여 &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; 파일을 생성하여 샘플 프로젝트에 추가한다. 다운로드한 Facebook Unity SDK도 추가한다.&lt;/p&gt;

    &lt;p&gt;Facebook Unity SDK를 추가하면 Firebase Auth SDK와 충돌하는 파일이 4개 있다. 프로젝트에 사용된 Firebase Unity SDK는 4.3이고 Facebook Unity SDK는 7.11.1이다. 충돌이나는 파일은 &lt;code&gt;PlayServicesResolver의&lt;/code&gt; 폴더에 있는 4개 파일인데 1.2.59 버전 파일을 모두 삭제한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_02_01.png&quot; alt=&quot;PlayServicesResolver 내 파일 삭제&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Android 빌드는 확인해보지 않아서 어떤 문제가 발생할지 모릅니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unity에서 &lt;code&gt;Facebook&lt;/code&gt; - &lt;code&gt;Edit Settings&lt;/code&gt; 메뉴 선택한 뒤 facebook for developers에서 확인한 &lt;code&gt;앱 ID&lt;/code&gt;를 입력한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_02_02.png&quot; alt=&quot;Facebook - Edit Settings 메뉴 선택&quot; width=&quot;20%&quot; /&gt;
  &lt;img src=&quot;/images/fb_03_02_03.png&quot; alt=&quot;Facebook 앱 ID 입력&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;facebook-로그인-구현&quot;&gt;Facebook 로그인 구현&lt;/h3&gt;

&lt;p&gt;Facebook 로그인은 2 단계로 진행된다. Facebook Unity SDK로 로그인을 진행하고, Facebook에서 반환한 access token으로 Firebase Auth SDK로 등록을 진행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;gfb_auth_test.cs&lt;/code&gt; 스크립트를 열고 아래처럼 변경한다.
    &lt;ul&gt;
      &lt;li&gt;8번 줄: using으로 필요한 네임스페이스 형식 사용 허용(Facebook.Unity)&lt;/li&gt;
      &lt;li&gt;29~32번 줄(&lt;code&gt;Start&lt;/code&gt; 메서드 내): Facebook SDK를 초기화 추가&lt;/li&gt;
      &lt;li&gt;40~45번 줄: Firebase 인증 SDK로 signin이 된 상태인지 확인하는 프로퍼티 추가&lt;/li&gt;
      &lt;li&gt;90~184번 줄(페이스북 로그인 관련 메서드 region): 페이스북 로그인을 시도하고 firebase에 등록하는 메서드가 모여있다. 아래 흐름도를 살펴보고 코드를 보면 조금 더 이해하기 수월하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/fb_03_03_01.png&quot; alt=&quot;페이스북 흐름도&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com//785a451847aebd36a548061a47cf261a.js?file=gfb_auth_test_for_fb.cs&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;gfb_auth_test의 &lt;code&gt;facebookLogin&lt;/code&gt; 메서드가 실행되어야 페이스북 로그인을 시도할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Canvas - Button 게임 오브젝트의 Button 컴포넌트를 찾아서 복사한 뒤 적당히 위치 시키고 &lt;code&gt;Facebook Login&lt;/code&gt;으로 텍스트를 변&lt;/li&gt;
      &lt;li&gt;gfb_auth_test 스크립트의 &lt;code&gt;facebookLogin&lt;/code&gt;을 선택한다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_03_03_02.png&quot; alt=&quot;버큰 복사 후 텍스트 변경&quot; width=&quot;30%&quot; /&gt;
  &lt;img src=&quot;/images/fb_03_03_03.png&quot; alt=&quot;버튼 연결&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디버깅&quot;&gt;디버깅&lt;/h3&gt;

&lt;p&gt;Firebase 인증 SDK로 Facebook 로그인을 시도하면 Unity Editor에서는 디버깅이 불가능하다. 빌드 후 앱 클라이언트에서 확인해야한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;iOS의 빌드의 경우 Facebook SDK 추가 후 빌드 시 Build Settting에서 Enable Bitcode를 No로 설정해야 linker 에러 없이 진행된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/fb_03_04_01.png&quot; alt=&quot;등록 확인&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook 로그인 후 Firebase에 등록을 마치면 위 그림처럼 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/firebase_toturial/archive/auth_facebook.zip&quot;&gt;완료된소스코드&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;간단히 끝날 내용이었는데 linker 에러와 Firebase 내의 Facebook 앱 ID를 잘못 입력해서 많은 빌드 실패가 있었다. 꼭 설정은 2번 3번 확인하길 바란다.&lt;/p&gt;

&lt;p&gt;그리고 이런 다양한 문제를 해결하고 있는 클라이언트 프로그래머 여러분 대단하십니다👍👍👍.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/auth/unity/facebook-login&quot;&gt;Authenticate Using Facebook Login and Unity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/auth/unity/account-linking&quot;&gt;Link Multiple Auth Providers to an Account in Unity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/unity/examples#login&quot;&gt;Facebook SDK for Unity - Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/facebook-sdk-for-unity/issues/135&quot;&gt;Facebook SDK for Unity isssue 135&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Thu, 22 Mar 2018 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2018/03/22/firebaseandunity-02/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2018/03/22/firebaseandunity-02/</guid>
            
            
            <category>nodejs</category>
            
            <category>firebase</category>
            
            <category>unity</category>
            
        </item>
      
    
      
        <item>
            <title>3분 게임 서버(Firebase) - Auth 익명 로그인</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#고백&quot; id=&quot;markdown-toc-고백&quot;&gt;고백&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#firebase의-약팔이-새로운-기능&quot; id=&quot;markdown-toc-firebase의-약팔이-새로운-기능&quot;&gt;Firebase의 &lt;del&gt;약팔이&lt;/del&gt; 새로운 기능&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#사용자-로그인-흐름&quot; id=&quot;markdown-toc-사용자-로그인-흐름&quot;&gt;사용자 로그인 흐름&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#준비-과정&quot; id=&quot;markdown-toc-준비-과정&quot;&gt;준비 과정&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로젝트-추가&quot; id=&quot;markdown-toc-프로젝트-추가&quot;&gt;프로젝트 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로젝트-설정&quot; id=&quot;markdown-toc-프로젝트-설정&quot;&gt;프로젝트 설정&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#익명-로그인&quot; id=&quot;markdown-toc-익명-로그인&quot;&gt;익명 로그인&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로그래밍-준비&quot; id=&quot;markdown-toc-프로그래밍-준비&quot;&gt;프로그래밍 준비&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#익명-로그인-구현&quot; id=&quot;markdown-toc-익명-로그인-구현&quot;&gt;익명 로그인 구현&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#디버깅&quot; id=&quot;markdown-toc-디버깅&quot;&gt;디버깅&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;h3 id=&quot;고백&quot;&gt;고백&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.totu.dev/2016/12/21/azureandunity-01/&quot;&gt;이세계에 진입한 서버 개발&lt;/a&gt;을 시작하고 1년이 지났다. 그 동안 이직을 했고 바쁜 시간을 보냈다는 핑계로 업데이트 없는 9개월을 보냈다.&lt;/p&gt;

&lt;p&gt;놀기만 했으면 좋으련만 6월부터 &lt;code&gt;이세계에 진입한 서버 개발&lt;/code&gt;을 책으로 출판할 생각으로 작업중이었는데 최근 절필했다. 2가지 이유가 있다. 하나는 오래된 코드라서 봐줄 수 없었다(이건 내 실력이…). 다른 하나는 게임 클라이언트 프로그래머만 있는 소규모 게임 개발팀에서 node.js와 관계형 데이터베이스를 공부해서 게임용 웹 서버를 만들 수 있을까하는 의문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;게임 개발할 시간도 없는데 서버는 젠장!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wendy를 활용하는 게임 클라이언트 프로그래머가 인프라 공부에 시간 보낼까봐 PaaS(Platform as a Service)를 사용하도록 유도했지만 충분한 대답이 아니었다. 이보다 더 낮은 진입이 가능해야 순수 클라이언트 프로그래머가 공부할 수 있을 듯 했다. 그렇다면 좋은 서비스는 Parse나 Firebase같은 BaaS(Backend as a Service)다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Facebook이 인수하여 서비스하던 Parse는 서비스가 종료되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;firebase의-약팔이-새로운-기능&quot;&gt;Firebase의 &lt;del&gt;약팔이&lt;/del&gt; 새로운 기능&lt;/h3&gt;

&lt;p&gt;과거의 Firebase는 모바일 게임용 백엔드로 활용하기에 문제가 있었다. 게임 클라이언트에 Firebase SDK를 활용해 비지니스 로직을 넣게된다. 운영중에 비지니스 로직에 문제가 발생하면 모바일 게임은 플랫폼 심사 시간이 있어 빠른 대처가 어렵다. 출시 후 운영중에 대처가 늦으면 사용자 감소와 함께 매출이 감소한다. 이런 부담은 QA로 해소될 수 있으나 소규모 게임 제작팀은 비용때문에 불가능하다.&lt;/p&gt;

&lt;p&gt;2017년 3월 Firebase에 node.js 환경으로 프로그래밍이 가능한 &lt;code&gt;Cloud Functions&lt;/code&gt;이 추가되었다. 이 기능을 활용하면 비지니스 로직을 게임 클라이언트 외부로 옮길 수 있다. 또 Firebase에 &lt;code&gt;Realtime Database&lt;/code&gt;외에도 &lt;code&gt;Cloud Firestore&lt;/code&gt;란 데이터베이스가 추가되었다. 이제 거대한 파일 하나에 모든 데이터를 넣지 않아도 된다. 단, 아직까지 Firebase Unity SDK에서는 사용할 수 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MS에서도 &lt;a href=&quot;http://Playfab.com&quot;&gt;Playfab&lt;/a&gt;을 인수하여 Google의 Firebase같은 서비스를 제공할 예정이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;새롭게 연재하는 글에서는 Firebase를 이용해서 게임 서버를 사용하도록 권장한다. 특히 클라이언트 프로그래머가 보유한 팀이라면 더더욱 이 방법을 추천한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;처음부터 c++로 서버 프로그래밍하는 책 사지 마시라. 어느정도 필요가 차올랐을 때 아주 간단한 것부터 시작하길 권한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;사용자-로그인-흐름&quot;&gt;사용자 로그인 흐름&lt;/h2&gt;
&lt;p&gt;서론이 길었다. 이번에 진행할 것은 익명 로그인이다. 먼저 사용자가 게임을 시작했을 때 어떤 단계를 걸치는지 상상해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;타이틀 화면
    &lt;ul&gt;
      &lt;li&gt;게스트/페북 로그인 클릭(1회면 진행됨)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_01_01n.png&quot; alt=&quot;타이틀 화면&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그인 절차&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_01_02n.png&quot; alt=&quot;로그인&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;게임 플레이&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_01_03n.png&quot; alt=&quot;게임 플레이&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 과정을 거치는 이유는 제작자 혹은 운영자가 통제하는 시스템에 등록된 사용자인지 확인하기 위해서이다. 그럼 가장 간편한 로그인 방식인 익명 로그인 - 혹은 게스트 로그인 - 을 Firebase 인증(Authentication)을 활용해서 제작해보자.&lt;/p&gt;

&lt;p&gt;가장 간편한 로그인 방식인 익명 로그인을 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;준비-과정&quot;&gt;준비 과정&lt;/h2&gt;
&lt;p&gt;Unity 클라이언트에서 Firebase 인증을 활용해서 익명 로그인을 구현하려면 몇가지 선행 과정이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;프로젝트-추가&quot;&gt;프로젝트 추가&lt;/h3&gt;

&lt;p&gt;Firebase 프로젝트 추가에 앞서 Firebase를 사용하려면 google 계정이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;google 계정으로 로그인 한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;Firebase console&lt;/a&gt;로 이동한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;프로젝트 추가&lt;/code&gt;를 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_01_01.png&quot; alt=&quot;프로젝트 추가&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;프로젝트 이름&lt;/code&gt;을 입력하고 &lt;code&gt;국가/지역&lt;/code&gt;을 선택한 뒤 &lt;code&gt;프로젝트 만들기&lt;/code&gt;를 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_01_02.png&quot; alt=&quot;프로젝트 추가&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로젝트-설정&quot;&gt;프로젝트 설정&lt;/h3&gt;
&lt;p&gt;Firebase를 클라이언트(Android, iOS, Web)에서 사용하려면 설정을 추가하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서는 iOS로 설명하지만 Android라고 크게 다를건 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Project Overview&lt;/code&gt; 메뉴 옆에 기어 모양 설정 버튼을 클릭하고 프로젝트 설정을 클릭한다.
  &lt;img src=&quot;/images/fb_01_03_1.png&quot; alt=&quot;프로젝트 설정&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 탭에서 하단의 &lt;code&gt;iOS 앱에 Firebase 추가&lt;/code&gt; 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_01_03_2.png&quot; alt=&quot;iOS 추가&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;iOS 번들 ID&lt;/code&gt;를 입력하고 나머지 선택사항도 필요에 따라 입력한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_01_03_3.png&quot; alt=&quot;입력&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;GoogleService-Info.plist&lt;/code&gt; 파일을 다운받고 계속 버튼을 눌러 등록 과정을 마친다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;익명-로그인&quot;&gt;익명 로그인&lt;/h2&gt;
&lt;p&gt;익명 로그인이 요구하는 사항은 간단하다. 여러가지 정보를 취합해서 게임 내에서 사용자를 고유하게 인식할 수 있으면 된다. 다음 절차로 진행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자) 익명 로그인 버튼 클릭&lt;/li&gt;
  &lt;li&gt;게임 클라이언트) Firebase 인증 SDK에 익명 로그인 요청&lt;/li&gt;
  &lt;li&gt;Firebase) 여러가지 정보 확인 후 고유한 사용자 ID 반환&lt;/li&gt;
  &lt;li&gt;게임 클라이언트) 고유한 사용자 ID 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로그래밍-준비&quot;&gt;프로그래밍 준비&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 간단한 UI를 추가해놓은 아래 Unity Project를 다운 받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/firebase_toturial/archive/base.zip&quot;&gt;샘플 프로젝트&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Firebase SDK를 다운받아서 Firebase Auth SDK를 설치한다. 그리고 앞서 Firebase 프로젝트에서 다운받은 &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;나 &lt;code&gt;google-services.json&lt;/code&gt;을 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Firebase의 Authentication 메뉴에서 &lt;code&gt;로그인 방법&lt;/code&gt; 탭을 클릭한 뒤 &lt;code&gt;익명&lt;/code&gt; 사용 설정한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_02_01.png&quot; alt=&quot;Authentication&quot; width=&quot;30%&quot; /&gt;
  &lt;img src=&quot;/images/fb_02_02_02.png&quot; alt=&quot;익명 사용 설정&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;익명-로그인-구현&quot;&gt;익명 로그인 구현&lt;/h3&gt;
&lt;p&gt;Firebase 인증을 활용할 때 초기화 후 익명 로그인 요청을 해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unity 프로젝트의 프로젝트 탭에서 scripts 폴더를 만들고 &lt;code&gt;gfb_auth_test&lt;/code&gt;란 이름의 새로운 c# script 파일을 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이름은 달라도 무방하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;추가한 스크립트를 편집할 수 있게 더블 클릭한 후 아래 코드를 복사하여 붙여넣는다.
    &lt;ul&gt;
      &lt;li&gt;4~7번: using으로 필요한 네임스페이스 형식 사용 허용&lt;/li&gt;
      &lt;li&gt;11~18번: 필요한 필드 추가&lt;/li&gt;
      &lt;li&gt;23~49번: &lt;code&gt;auth&lt;/code&gt;필드를 추가하고 상태변화 시 로그가 남도록 AuthStateChanged 메서드 연결.&lt;/li&gt;
      &lt;li&gt;52~69번: 익명 로그인을 요청하는 메서드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com//785a451847aebd36a548061a47cf261a.js?file=gfb_auth_test.cs&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;unity 프로젝트로 돌아가서 &lt;code&gt;test&lt;/code&gt;씬의 &lt;code&gt;Main Camera&lt;/code&gt; 게임 오브젝트에 &lt;code&gt;gfb_auth_test&lt;/code&gt; 스크립트를 추가한다. Canvas - Scroll View - ViewPort - Content 게임 오브젝트를 &lt;code&gt;gfb_auth_test&lt;/code&gt;의 Txt Print에 연결한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_03.png&quot; alt=&quot;게임 오브젝트 연결&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;guest login 버튼을 클릭했을 때 gfb_auth_test의 &lt;code&gt;anoymousLogin&lt;/code&gt; 메서드가 실행되어야 익명 로그인을 시도할 수 있다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Canvas - Button 게임 오브젝트의 Button 컴포넌트를 찾는다.&lt;/li&gt;
      &lt;li&gt;On Click의 + 버튼을 클릭한 뒤 Main Camera 게임 오브젝트를 연결한다.&lt;/li&gt;
      &lt;li&gt;gfb_auth_test 스크립트의 anoymousLogin을 선택한다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/images/fb_02_04.png&quot; alt=&quot;버튼 연결&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디버깅&quot;&gt;디버깅&lt;/h3&gt;

&lt;p&gt;unity 프로젝트에서 &lt;code&gt;play&lt;/code&gt; 버튼을 클릭하여 작동 시킨 뒤 화면 중앙에 나타나는 &lt;code&gt;guest login&lt;/code&gt; 버튼을 클릭한다. 아래 스크롤뷰에 즉시 &lt;code&gt;Sign in...&lt;/code&gt; 메시지가 출력된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모바일 앱으로 빌드해서 확인하려면 앞서 다운받은 &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;나 &lt;code&gt;google-services.json&lt;/code&gt; 파일을 반드시 프로젝트에 추가해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;모바일 앱으로 빌드해서 해당 과정을 진행하면 Firebase console에 아래처럼 익명 사용자가 등록되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fb_02_05.png&quot; alt=&quot;익명 사용자 확인&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;Firebase 인증을 활용하여 익명 로그인을 만들어봤다. 이를 바탕으로 다음에는 소셜 로그인 기능을 추가해보자.&lt;/p&gt;
</description>
            <pubDate>Thu, 22 Mar 2018 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2018/03/22/firebaseandunity-01/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2018/03/22/firebaseandunity-01/</guid>
            
            
            <category>nodejs</category>
            
            <category>firebase</category>
            
            <category>unity</category>
            
        </item>
      
    
      
        <item>
            <title>이세계에 진입한 서버 개발 - 7</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인앱-결제-영수증-검증&quot; id=&quot;markdown-toc-인앱-결제-영수증-검증&quot;&gt;인앱 결제 영수증 검증&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#모델-추가&quot; id=&quot;markdown-toc-모델-추가&quot;&gt;모델 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#라우터-추가&quot; id=&quot;markdown-toc-라우터-추가&quot;&gt;라우터 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#appjs에-등록&quot; id=&quot;markdown-toc-appjs에-등록&quot;&gt;app.js에 등록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#로직-추가&quot; id=&quot;markdown-toc-로직-추가&quot;&gt;로직 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#에러-추가&quot; id=&quot;markdown-toc-에러-추가&quot;&gt;에러 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#utilscommonfuncjs에-메서드-추가&quot; id=&quot;markdown-toc-utilscommonfuncjs에-메서드-추가&quot;&gt;utils/commonFunc.js에 메서드 추가&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#구글-권한-처리&quot; id=&quot;markdown-toc-구글-권한-처리&quot;&gt;구글 권한 처리&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#필요사항-준비&quot; id=&quot;markdown-toc-필요사항-준비&quot;&gt;필요사항 준비&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#모델-추가-1&quot; id=&quot;markdown-toc-모델-추가-1&quot;&gt;모델 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#라우터-추가-1&quot; id=&quot;markdown-toc-라우터-추가-1&quot;&gt;라우터 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#appjs에-등록-1&quot; id=&quot;markdown-toc-appjs에-등록-1&quot;&gt;app.js에 등록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#utilsauthjs-내용-추가&quot; id=&quot;markdown-toc-utilsauthjs-내용-추가&quot;&gt;utils/auth.js 내용 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#utilscommonfuncjs-내용-추가&quot; id=&quot;markdown-toc-utilscommonfuncjs-내용-추가&quot;&gt;utils/commonFunc.js 내용 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#에러-추가-1&quot; id=&quot;markdown-toc-에러-추가-1&quot;&gt;에러 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#redirect_uri-추가&quot; id=&quot;markdown-toc-redirect_uri-추가&quot;&gt;REDIRECT_URI 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#테스트&quot; id=&quot;markdown-toc-테스트&quot;&gt;테스트&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#데이터-입력&quot; id=&quot;markdown-toc-데이터-입력&quot;&gt;데이터 입력&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#영수증-검증-테스트&quot; id=&quot;markdown-toc-영수증-검증-테스트&quot;&gt;영수증 검증 테스트&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#테스트-관리자-계정-추가&quot; id=&quot;markdown-toc-테스트-관리자-계정-추가&quot;&gt;테스트 관리자 계정 추가&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#vs-code-개발-환경-설정&quot; id=&quot;markdown-toc-vs-code-개발-환경-설정&quot;&gt;vs code 개발 환경 설정&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#브라우저로-권한-요청&quot; id=&quot;markdown-toc-브라우저로-권한-요청&quot;&gt;브라우저로 권한 요청&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#웹-작업webjob-등록&quot; id=&quot;markdown-toc-웹-작업webjob-등록&quot;&gt;웹 작업(WebJob) 등록&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#소스코드-편집&quot; id=&quot;markdown-toc-소스코드-편집&quot;&gt;소스코드 편집&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#웹-작업-추가&quot; id=&quot;markdown-toc-웹-작업-추가&quot;&gt;웹 작업 추가&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺음말&quot; id=&quot;markdown-toc-맺음말&quot;&gt;맺음말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HzjtOTH0aMY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;내가 쓴 글 중 &lt;code&gt;구글 인앱 결제 검증 웹 서비스 만들기&lt;/code&gt;가 가장 인기 있다. 꾸준히 찾는 사람이 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;이세계에 진입한 서버 개발&lt;/code&gt; 연재가 시작된 후로도 최고 조회수 3위 안에 든다.&lt;/p&gt;

&lt;p&gt;그런데 해당 글에는 자원을 다루는 내용과 연계되지 못해 반쪽짜리였다.&lt;/p&gt;

&lt;p&gt;인앱 결제 영수증 검증을 했어도 자원을 클라이언트에서 관리하게되면 메모리 조작 등으로 방지해도 방지한게 아닌 상태가 된다.&lt;/p&gt;

&lt;p&gt;이 시간에는 인앱 결제 영수증 검증과 자원 지급을 묶어서 처리하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;인앱-결제-영수증-검증&quot;&gt;인앱 결제 영수증 검증&lt;/h2&gt;

&lt;p&gt;인앱 결제 후 영수증 검증 과정은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rvwendy07_07.png&quot; alt=&quot;인앱영수증검증&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버 사이드에서 처리하는 일은 인앱 영수증 검증을 요청하고, 자원을 지급하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;모델-추가&quot;&gt;모델 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; 폴더에 파일을 추가하고 각각 아래 내용을 적용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.1/models/LogReceipt.js&quot;&gt;LogReceipt.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.1/models/DefineShop.js&quot;&gt;DefineShop.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;LogReceipt&lt;/code&gt;는 검증 요청한 영수증을 저장한다. &lt;code&gt;DefineShop&lt;/code&gt;은 상점을 관리할 때 사용한다. 여기서는 인앱 결제로 사용되는 상품을 나타내도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;라우터-추가&quot;&gt;라우터 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt;폴더에 &lt;code&gt;receipt.js&lt;/code&gt; 파일을 추가하고 아래 내용을 적용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.5/routes/receipt.js&quot;&gt;routes/receipt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;appjs에-등록&quot;&gt;app.js에 등록&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt; 파일을 수정하여 receipt 라우터를 추가해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;에서 아래 내용을 찾아서 그 아래쪽에 코드를 추가한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;찾아야하는 내용&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  const routes = require(&#39;./routes/index&#39;);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;추가할 코드&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  const receipt = require(&#39;./routes/receipt&#39;);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;에서 아래 내용을 찾아서 그 아래쪽에 코드를 추가한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;찾아야하는 내용&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  app.use(&#39;/&#39;, routes);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;추가할 코드&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  app.use(&#39;/receipt&#39;, receipt);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;로직-추가&quot;&gt;로직 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;logics&lt;/code&gt; 폴더에 &lt;code&gt;validationReceipt.js&lt;/code&gt; 파일을 추가하고 아래 내용을 적용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.5/logics/validationReceipt.js&quot;&gt;logics/validationReceipt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;애플, 구글, 원스토어의 영수증을 검정할 때 사용하는 로직을 모아두었다.&lt;/p&gt;

&lt;p&gt;각 로직은 마켓 서버에 HTTP로 검증 요청을 보내게되므로 request 모듈을 새로 추가해야한다.&lt;/p&gt;

&lt;p&gt;프로젝트 폴더에서 아래 명령을 입력한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yarn add request
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;에러-추가&quot;&gt;에러 추가&lt;/h3&gt;
&lt;p&gt;에러코드를 추가한다. &lt;code&gt;utils/error.js&lt;/code&gt;에 아래 클래스를 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
/** 80701 */
class UnsupportedReceiptType extends CustomError {
    constructor() {
        let message = &#39;지원하지 않거나 존재하지 않는 영수증타입(ReceipType)&#39;;
        let code = 80701;
        super(message, code);
    }
}

/** 80702 */
class InitializationFirst extends CustomError {
    constructor() {
        let message = &#39;초기화를 먼저 진행해야한다.&#39;;
        let code = 80702;
        super(message, code);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;utils/error.js&lt;/code&gt;의 &lt;code&gt;errorMap&lt;/code&gt; 오브젝트에 추가할 클래스를 등록한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;추가할 때 이전의 마지막 부분 - 여기서는 NoLongerUpgrade - 에 콤마(,)를 추가하여야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;UnsupportedReceiptType&quot;:UnsupportedReceiptType,
&quot;InitializationFirst&quot;:InitializationFirst

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;utilscommonfuncjs에-메서드-추가&quot;&gt;utils/commonFunc.js에 메서드 추가&lt;/h3&gt;

&lt;p&gt;오브젝트에 원하는 프로퍼티가 하나라도 있는지 체크하는 메서드를 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/**
 * object에 key가 적어도 하나라도 포함되어있는지 체크.
 */
exports.ObjectIncludeOneKey = (obj, keyArr)=&amp;gt;{
    for(let argValue of keyArr) {
        if(obj.hasOwnProperty(argValue) === true)
            return true;
    }
    return false;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;구글-권한-처리&quot;&gt;구글 권한 처리&lt;/h2&gt;

&lt;p&gt;검증과 관련된 부분은 완료되었다. 그러나 문제가 하나 있다.&lt;/p&gt;

&lt;p&gt;애플과 원스토어는 별도의 권한없이 영수증 확인이 가능하다. 구글은 권한이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.totu.dev/2016/02/10/google-oauth/#필요사항-준비&quot;&gt;구글 인앱 결제 검증 웹 서비스 만들기&lt;/a&gt;에서도 많은 부분이 이 내용이었다.&lt;/p&gt;

&lt;p&gt;길고 지루하겠지만 다음 과정을 진행해보자.&lt;/p&gt;

&lt;h3 id=&quot;필요사항-준비&quot;&gt;필요사항 준비&lt;/h3&gt;
&lt;p&gt;구글 개발자 콘솔에서 &lt;code&gt;OAuth&lt;/code&gt;로 사용자를 인증하는 아이디를 등록해서 &lt;code&gt;CLIENT_ID&lt;/code&gt;, &lt;code&gt;CLIENT_SECRET&lt;/code&gt;를 얻는 과정을 알아보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://play.google.com/apps/publish/#ApiAccessPlace&quot;&gt;구글 플레이 개발자 콘솔&lt;/a&gt;에 접속한 후 &lt;code&gt;API 액세스&lt;/code&gt; 페이지로 이동한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;처음 사용 시 신규 프로젝트를 생성하거나 기존에 등록된 것이 있다면 원하는 것을 선택하고 링크를 클릭한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2번 과정을 통해 &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;구글 개발자 콘솔&lt;/a&gt;에 접속한 후 &lt;code&gt;API 관리자&lt;/code&gt;에 도달했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;사용자 인증 정보 - 새 사용자 인증 정보&lt;/code&gt; 버튼을 클릭하고 &lt;code&gt;OAuth 클라이언트 ID&lt;/code&gt;를 선택한다.&lt;br /&gt;
 &lt;img src=&quot;/images/OAuth_clientid.png&quot; alt=&quot;OAuth 클라이언트 ID 생성&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;웹 어플리케이션&lt;/code&gt;을 선택하고 &lt;code&gt;이름&lt;/code&gt;을 입력한 후 &lt;code&gt;생성&lt;/code&gt;버튼을 클릭한다.
 &lt;img src=&quot;/images/OAuth_clientid1.png&quot; alt=&quot;클라이언트 ID 만들기&quot; width=&quot;340px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성이 완료되면 &lt;code&gt;클라이언트 ID&lt;/code&gt;와 &lt;code&gt;클라이언트 보안 비밀&lt;/code&gt;이 출력된다.
 &lt;img src=&quot;/images/OAuth_clientid2.png&quot; alt=&quot;클라이언트 ID 확인&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이로써 &lt;code&gt;CLIENT_ID&lt;/code&gt;, &lt;code&gt;CLIENT_SECRET&lt;/code&gt;는 확보되었다. &lt;code&gt;REDIRECT_URL&lt;/code&gt;은 이후 과정에서 추가하기로 하고 넘어가자.&lt;/p&gt;

&lt;h3 id=&quot;모델-추가-1&quot;&gt;모델 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; 폴더에 파일을 추가하고 각각 아래 내용을 적용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.2/models/AdminUser.js&quot;&gt;AdminUser.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.2/models/AuthGoogle.js&quot;&gt;AuthGoogle.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관리자 계정을 등록할 수 있도록 &lt;code&gt;AdminUser&lt;/code&gt;를 추가했다. 구글 권한 획득 내용을 기록할 수 있도록 &lt;code&gt;AuthGoogle&lt;/code&gt;을 추가했다.&lt;/p&gt;

&lt;h3 id=&quot;라우터-추가-1&quot;&gt;라우터 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt;폴더에 &lt;code&gt;auth.js&lt;/code&gt; 파일을 추가하고 아래 내용을 적용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/tuto7.2/routes/auth.js&quot;&gt;routes/auth.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;appjs에-등록-1&quot;&gt;app.js에 등록&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt; 파일을 수정하여 auth 라우터를 추가해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;에서 아래 내용을 찾아서 그 아래쪽에 코드를 추가한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;찾아야하는 내용&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  const routes = require(&#39;./routes/index&#39;);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;추가할 코드&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  const auth = require(&#39;./routes/auth&#39;);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;에서 아래 내용을 찾아서 그 아래쪽에 코드를 추가한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;찾아야하는 내용&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  app.use(&#39;/&#39;, routes);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;추가할 코드&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  app.use(&#39;/auth&#39;, auth);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;utilsauthjs-내용-추가&quot;&gt;utils/auth.js 내용 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;utils/auth.js&lt;/code&gt;에 다음 내용을 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);
const cryptoPassword = 
    process.env.cryptoPassword || &#39;wendy&#39;;

exports.encryptPassword = (password)=&amp;gt;{
    let hash = crypto.createHash(&#39;sha256&#39;)
        .update(cryptoPassword).digest(&#39;base64&#39;);
    return hash;
}

exports.isAdminAuthenticated = (req, res, next)=&amp;gt;{
    jwt.verify(req.headers.authorization, SECRET, (err, decoded)=&amp;gt;{
        if(err || decoded.grade &amp;lt; 10) {
            let error = wendyError(&#39;CredentialFailure&#39;);
            res.status(401).send({result:error.code, message:error.message});
        }
        else {
            req.admin = {
                email:decoded.email,
                grade:decoded.grade
            };
            return next();
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;utilscommonfuncjs-내용-추가&quot;&gt;utils/commonFunc.js 내용 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;utils/commonFunc.js&lt;/code&gt;에 다음 내용을 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const emailRegEx = /^(([^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

exports.checkEmail = (email)=&amp;gt;{
    return emailRegEx.test(email);
}

const passwordRegEx = /^(?=.*[a-zA-Z])((?=.*\d)|(?=.*\W)).{8,16}$/

exports.checkPassword = (password)=&amp;gt;{
    return passwordRegEx.test(password);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;에러-추가-1&quot;&gt;에러 추가&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;utils/error.js&lt;/code&gt;에 아래 클래스를 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/** 99201 */
class WrongEmailOrPassword extends CustomError {
    constructor() {
        let message = &#39;email 이나 password가 없거나 틀렸다.&#39;;
        let code = 99201;
        super(message, code);
    }
}

/** 99202 */
class UsedEmail extends CustomError {
    constructor() {
        let message = &#39;이미 사용중인 email&#39;;
        let code = 99202;
        super(message, code);
    }
}

/** 99203 */
class WrongEmail extends CustomError {
    constructor() {
        let message = &#39;email 형식이 아니다&#39;;
        let code = 99203;
        super(message, code);
    }
}

/** 99204 */
class WrongPassword extends CustomError {
    constructor() {
        let message = &#39;password는 최소 1개의 숫자 혹은 특수문자를 포함한 8~16자리여야 한다&#39;;
        let code = 99204;
        super(message, code);
    }
}

/** 99205 */
class LockdownUserAccess extends CustomError {
    constructor() {
        let message = &#39;password 입력 실패 5회로 권한 박탈, 관리자에게 문의!&#39;;
        let code = 99205;
        super(message, code);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;utils/error.js&lt;/code&gt;의 &lt;code&gt;errorMap&lt;/code&gt; 오브젝트에 추가할 클래스를 등록한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;추가할 때 이전의 마지막 부분 - 여기서는 NoLongerUpgrade - 에 콤마(,)를 추가하여야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;WrongEmailOrPassword&quot;:WrongEmailOrPassword,
&quot;UsedEmail&quot;:UsedEmail,
&quot;WrongEmail&quot;:WrongEmail,
&quot;WrongPassword&quot;:WrongPassword,
&quot;LockdownUserAccess&quot;:LockdownUserAccess,

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;redirect_uri-추가&quot;&gt;REDIRECT_URI 추가&lt;/h3&gt;

&lt;p&gt;필요사항을 준비할 때 빼놓은 &lt;code&gt;REDIRECT_URI&lt;/code&gt;을 등록해보자.&lt;/p&gt;

&lt;p&gt;Azure 웹앱의 hostname을 기억한다면 &lt;code&gt;/auth/google/return&lt;/code&gt; 패스를 더해 아래와 같은 형태가 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;hostname/auth/google/return&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;로컬 개발 환경에서는 ngrok을 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;ngrok은 외부에서 내 컴퓨터에 접근할 수 있도록 터널을 뚫어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ngrok.com/static/img/demo.png&quot; alt=&quot;ngrok 개념&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1159&quot;&gt;ngrok으로 로컬 네트워크의 터널 열기&lt;/a&gt;에 자세히 설명되어있음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://ngrok.com/download&quot;&gt;ngrok을 설치&lt;/a&gt;한 후 포트를 열도록 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ ./ngrok http 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;osx나 linux 환경에서는 path에 등록되지 않았을 때 ngrok이 위치한 폴더에서 위와 같이 입력한다. path에 등록되어있다면 &lt;code&gt;./&lt;/code&gt;는 제거한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;포트가 열리면 아래처럼 주소가 나온다. 해당 주소를 hostname으로 사용하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Azure 웹앱&lt;/code&gt;에서 사용할 때는 hostname이 웹앱의 URL로 대치되어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/rvwendy07_02.png&quot; alt=&quot;ngrok 포트 개방 예시&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;redirect_uri&lt;/code&gt;에 입력한 주소를 &lt;a href=&quot;https://console.developers.google.com/apis&quot;&gt;구글 개발자 콘솔 API 관리자&lt;/a&gt;에 접속하여 등록해야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rvwendy07_01.png&quot; alt=&quot;redirect uri 업데이트&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;테스트&quot;&gt;테스트&lt;/h3&gt;

&lt;h4 id=&quot;데이터-입력&quot;&gt;데이터 입력&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;DefineShop&lt;/code&gt; 테이블에 데이터를 입력한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ShopID&lt;/th&gt;
      &lt;th&gt;ProductName&lt;/th&gt;
      &lt;th&gt;PriceType&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;th&gt;RewardSetGroupID&lt;/th&gt;
      &lt;th&gt;RewardGoodsGroupID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;6001&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;영수증-검증-테스트&quot;&gt;영수증 검증 테스트&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;패스 : POST&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URL : localhost:3000/receipt/validation/apple&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Headers : Authorization을 추가하고 토큰 내용을 value 부분에 넣는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;body : 아래 내용을 넣는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/totuworld/Wendy/develope/test/samplereceipt.json&quot;&gt;samplereceipt.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 요청되면 아래와 같은 형식의 결과를 확인할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;result&quot;: 0,
  &quot;reward&quot;: {
    &quot;item&quot;: [],
    &quot;currency&quot;: [
      {
        &quot;TotalQNTY&quot;: 900000,
        &quot;OwnCurrencyUID&quot;: 7,
        &quot;CurrencyID&quot;: 103,
        &quot;CurrentQNTY&quot;: 1217,
        &quot;NowMaxQNTY&quot;: 900000,
        &quot;AddMaxQNTY&quot;: 0,
        &quot;UpdateTimeStamp&quot;: &quot;2017-02-21T00:00:00.000Z&quot;,
        &quot;GameUserID&quot;: 1
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;테스트-관리자-계정-추가&quot;&gt;테스트 관리자 계정 추가&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;패스 : POST&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URL : localhost:3000/auth/add&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;body : 아래 내용을 넣는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
	&quot;email&quot;:&quot;totuworld@gmail.com&quot;,
	&quot;password&quot;:&quot;test1234&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트용으로 추가한 것이다. 운영할 때 복잡한 패스워드를 사용하고 절대 공개하면 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;별도의 관리툴이 없으므로 DBeaver로 &lt;code&gt;AdminUser&lt;/code&gt;테이블로 접근한 뒤 &lt;code&gt;grade&lt;/code&gt;를 10으로 조정한다.&lt;/p&gt;

&lt;h4 id=&quot;vs-code-개발-환경-설정&quot;&gt;vs code 개발 환경 설정&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;.vscode/launch.json&lt;/code&gt;에서 &lt;code&gt;env&lt;/code&gt;노드를 찾아서 아래 3가지 환경변수를 추가한다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code&gt;hostname&lt;/code&gt;은 ngrok을 통해 얻은 hostname을 입력해야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;                &quot;authAOSClientID&quot;:&quot;{클라이언트 id}&quot;,
                &quot;authAOSClientSecret&quot;:&quot;{클라이언트 secret}&quot;,
                &quot;authAOSRedirectURI&quot;:&quot;{hostname}/auth/google/return&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;콤마(,)추가를 잊지 말자!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;눈치가 빠른 사람이라면 알겠지만 &lt;code&gt;Azure 웹앱&lt;/code&gt;에도 환경 변수 등록을 해야한다. 단 hostname은 웹앱의 URL를 넣어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;브라우저로-권한-요청&quot;&gt;브라우저로 권한 요청&lt;/h4&gt;

&lt;p&gt;vs code에서 실행한 뒤 브라우저로 아래 주소로 접속한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:3000/auth/google/start&quot;&gt;localhost:3000/auth/google/start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rvwendy07_03.png&quot; alt=&quot;오프라인액세스권한&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;허용&lt;/code&gt; 버튼을 클릭하면 아래처럼 토큰을 얻을 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;access_token&quot;: &quot;ya29.Glhaha&quot;,
    &quot;expires_in&quot;: 3600,
    &quot;refresh_token&quot;: &quot;1/o8-U9haha&quot;,
    &quot;token_type&quot;: &quot;Bearer&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;웹-작업webjob-등록&quot;&gt;웹 작업(WebJob) 등록&lt;/h2&gt;
&lt;p&gt;Google 권한 요청으로 얻은 토큰은 1시간 동안만 유효하다. 실제로 서비스가 이뤄지고 있다면 지속적인 갱신이 필요하다.&lt;/p&gt;

&lt;p&gt;Azure 웹앱은 이러한 작업을 &lt;code&gt;웹 작업&lt;/code&gt;(WebJob)으로 해결하도록 도와준다.&lt;/p&gt;

&lt;h3 id=&quot;소스코드-편집&quot;&gt;소스코드 편집&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아래 링크로 웹 작업용 소스코드를 다운받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/Wendy-webjob/archive/0.0.1.zip&quot;&gt;Wendy-webjob&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;소스코드에서 server.js 파일의 3가지 변수를 수정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let email = &#39;&#39;;
let password = &#39;&#39;;
let hostname = &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;앞선 예시를 반영하면 아래와 같이 변경한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let email = &#39;totuworld@gmail.com&#39;;
let password = &#39;test1234&#39;;
let hostname = &#39;Azure 웹앱 URL&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;모듈을 설치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;전체 폴더를 압축한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이때 반드시 &lt;code&gt;Wendy-webjob&lt;/code&gt;압축해제한 폴더 내부에서 모든 파일 및 폴더를 선택한 뒤 압축한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아래 이미지의 테두리가 있는 부분처럼 선택해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/rvwendy07_08.png&quot; alt=&quot;폴더선택&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-작업-추가&quot;&gt;웹 작업 추가&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://portal.azure.com&quot;&gt;Azure 포털(https://portal.azure.com)로 접속&lt;/a&gt;한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이전에 생성한 웹앱을 선택한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;왼쪽 설정 메뉴 하단에 &lt;code&gt;웹 작업&lt;/code&gt;을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/rvwendy07_04.png&quot; alt=&quot;웹작업&quot; width=&quot;200px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상단의 &lt;code&gt;추가&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/rvwendy07_05.png&quot; alt=&quot;웹작업추가&quot; width=&quot;120px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;이름&lt;/code&gt;을 입력하고 앞서 생성한 압축 파일을 선택한다. &lt;code&gt;형식&lt;/code&gt;을 &lt;code&gt;트리거됨&lt;/code&gt;으로 선택하고 20분마다 실행될 수 있도록 CRON 식을 아래 처럼 입력한다. &lt;code&gt;확인&lt;/code&gt; 버튼을 클릭하여 등록을 마친다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/rvwendy07_06.png&quot; alt=&quot;웹작업&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; 0 0/20 * * * *
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 등록된 웹 작업은 20분마다 Google 권한을 갱신 요청을 한다.&lt;/p&gt;

&lt;h2 id=&quot;맺음말&quot;&gt;맺음말&lt;/h2&gt;

&lt;p&gt;인앱 영수증을 검증하는 방법에 대해 알아봤다. Google은 다소 복잡한 권한 획득 과정이 필요하다. 실제 운영을 고려한다면 결제 전에 웹 서버로부터 develperPayload를 발급받아 결제를 진행해서 영수증에 함께 나오도록하여 검증 단계를 강화하는 것도 고려해야한다.&lt;/p&gt;

&lt;p&gt;인앱 결제를 크랙하려는 시도는 다양하므로 자물쇠를 더 단단히 걸어둘 필요가 있다.&lt;/p&gt;

&lt;p&gt;1차 - 혹은 1기 - 완료 목표였던 7강이 완료되었다.&lt;/p&gt;

&lt;p&gt;2016년 12월 말부터 2017년 3월 초까지 약 2달 조금 넘는 시간 동안 새벽을 허락해준 아내, &lt;code&gt;좋아요&lt;/code&gt;와 &lt;code&gt;공유&lt;/code&gt;, &lt;code&gt;댓글&lt;/code&gt;로 응원해준 모든 분에게 감사의 인사를 전한다.&lt;/p&gt;

&lt;p&gt;2차 - 혹은 2기 - 는 도적같이 찾아오도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;p&gt;완성된 소스코드는 아래 링크에서 다운로드받으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/Wendy/archive/0.0.6.zip&quot;&gt;Wendy 7강 완료 버전&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Tue, 07 Mar 2017 04:01:00 +0900</pubDate>
            <link>https://blog.totu.dev/2017/03/07/azureunity-07/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2017/03/07/azureunity-07/</guid>
            
            
            <category>nodejs</category>
            
            <category>azure</category>
            
            <category>webapps</category>
            
            <category>unity</category>
            
        </item>
      
    
      
        <item>
            <title>아빠 출근한다</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#때는-바야흐로-2016년&quot; id=&quot;markdown-toc-때는-바야흐로-2016년&quot;&gt;때는 바야흐로 2016년&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#회사의-인상은-사소한-것으로-결정된다&quot; id=&quot;markdown-toc-회사의-인상은-사소한-것으로-결정된다&quot;&gt;회사의 인상은 사소한 것으로 결정된다.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#소규모-회사&quot; id=&quot;markdown-toc-소규모-회사&quot;&gt;소규모 회사&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#상대적으로-큰-회사&quot; id=&quot;markdown-toc-상대적으로-큰-회사&quot;&gt;상대적으로 큰 회사&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#게임-회사&quot; id=&quot;markdown-toc-게임-회사&quot;&gt;게임 회사&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#획기적인-경험&quot; id=&quot;markdown-toc-획기적인-경험&quot;&gt;획기적인 경험&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺음말&quot; id=&quot;markdown-toc-맺음말&quot;&gt;맺음말&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;때는-바야흐로-2016년&quot;&gt;때는 바야흐로 2016년&lt;/h2&gt;

&lt;p&gt;재미있게 지내던 회사가 어쩔 수 없는 이유로 문을 닫게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;첫 프로젝트가 결실을 맺어 차기 프로젝트로 한번 더 손발을 맞춰볼 수 있기를 바랐지만…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2017년 백수가 되었다. 취직하려고 이력서를 보내기 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;회사의-인상은-사소한-것으로-결정된다&quot;&gt;회사의 인상은 사소한 것으로 결정된다.&lt;/h2&gt;

&lt;p&gt;지난 회사가 잘한 일은 입사 지원 시 &lt;code&gt;빠른 피드백&lt;/code&gt;, &lt;code&gt;면접비&lt;/code&gt;, &lt;code&gt;기다리지 않게하기&lt;/code&gt; 였다.&lt;/p&gt;

&lt;p&gt;입사 지원 메일 수신을 빠르게 피드백했고 면접 날짜 등을 조율하는 것 정확했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;같이 일한 동료 중에 이런 회사는 아라소판단 뿐이었다고 말할 정도로 잘했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;면접이 있는지 몰라 안내를 못하는 일은 없었다.&lt;/p&gt;

&lt;p&gt;그리고 작은 금액이라도 면접비가 지급되었다.&lt;/p&gt;

&lt;p&gt;이번에 이력서를 보낸 곳은 총 7곳이었다.&lt;/p&gt;

&lt;p&gt;2개 회사는 게임 회사이고 나머지는 웹 서비스를 제작하는 회사이다.&lt;/p&gt;

&lt;p&gt;3곳은 다른 회사에 비해서 규모가 컸다.&lt;/p&gt;

&lt;p&gt;그런데 규모와 상관없이 이런 연락이 늦거나 성의없는 대응을 보인 곳이 많았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;메일 회신을 3주 후 한 곳도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;소규모-회사&quot;&gt;소규모 회사&lt;/h3&gt;

&lt;p&gt;소규모 회사는 만나본 곳 모두 인상이 좋았다.&lt;/p&gt;

&lt;p&gt;일을 장악하고 있는 사람에게 풍기는 아우라랄까? 그런게 있었다.&lt;/p&gt;

&lt;p&gt;만나는 시간 자체가 즐거웠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그 중 한 회사 관계자는 개인적으로 친분을 유지하고 싶을만큼 대단했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;상대적으로-큰-회사&quot;&gt;상대적으로 큰 회사&lt;/h3&gt;

&lt;p&gt;회사마다 인사 관리가 이뤄지는 것은 특별한 룰은 없겠지만 비교될 만큼 처리 속도와 성의가 다른 두 업체가 존재했다.&lt;/p&gt;

&lt;p&gt;한 곳은 기계가 보낸 이메일만 회신할 수 있었다.&lt;/p&gt;

&lt;p&gt;함께할 수 없다는 얘기조차 시스템 메일로 대체했다.&lt;/p&gt;

&lt;p&gt;다른 한 곳은 엄청난 속도로 면접까지 진행됐다. 이런 규모에서 이래도 되나 싶을만큼 빨랐다.&lt;/p&gt;

&lt;h3 id=&quot;게임-회사&quot;&gt;게임 회사&lt;/h3&gt;

&lt;p&gt;크기에 상관없이 모두 무성의했고 피드백도 느렸다.&lt;/p&gt;

&lt;p&gt;메일 회신 조차 없어서 놀랐다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하긴 내가 별거 아닌 인간이긴 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;획기적인-경험&quot;&gt;획기적인 경험&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/flitto.png&quot; alt=&quot;인증샷&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 구직과정에서 가장 미안한 마음이 든 곳은 &lt;code&gt;플리토&lt;/code&gt;였다.&lt;/p&gt;

&lt;p&gt;node.js를 서비스에 적용한 회사로 전부터 지켜봐왔던 터라 더욱 미안하다.&lt;/p&gt;

&lt;p&gt;구인을 조금 늦게 알았고 면접 제안이 왔을 때 이미 다른 회사에 출근확정을 한 상태였다.&lt;/p&gt;

&lt;p&gt;미안한 마음을 전하고 싶었다. 그러던 중 연락을 받아 급 만남을 가졌다.&lt;/p&gt;

&lt;p&gt;회사를 둘러보고 얘기를 나눌 수 있는 즐거운 경험이었다.&lt;/p&gt;

&lt;p&gt;면접를 거절한 구직자와 구인자가 마주 앉아서 얘기를 나누다니!!&lt;/p&gt;

&lt;p&gt;대인배란 이런 것인가?!&lt;/p&gt;

&lt;h2 id=&quot;맺음말&quot;&gt;맺음말&lt;/h2&gt;

&lt;p&gt;많은 구직자 중 한 명에게 어떤 인상을 주느냐는 회사 차원에서 사소한 일이다.&lt;/p&gt;

&lt;p&gt;사소함이 술자리에 오르고 티 테이블에 오른다.&lt;/p&gt;

&lt;p&gt;지인의 사소한 경험은 선입견을 만들 때 많은 힘이 있다.&lt;/p&gt;

&lt;p&gt;PR자료 돌리고 이미지 광고하는 것보다 사소한 일에 더 신경쓰면 좋겠다.&lt;/p&gt;
</description>
            <pubDate>Sun, 26 Feb 2017 09:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2017/02/26/job/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2017/02/26/job/</guid>
            
            
            <category>etc</category>
            
        </item>
      
    
      
        <item>
            <title>Wendy 프로젝트 진행사항 3</title>
            <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가는-말&quot; id=&quot;markdown-toc-들어가는-말&quot;&gt;들어가는 말&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#프로젝트-진행-사항&quot; id=&quot;markdown-toc-프로젝트-진행-사항&quot;&gt;프로젝트 진행 사항&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#기능-목록&quot; id=&quot;markdown-toc-기능-목록&quot;&gt;기능 목록&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#튜토리얼-제작-사항&quot; id=&quot;markdown-toc-튜토리얼-제작-사항&quot;&gt;튜토리얼 제작 사항&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#완성된-튜토리얼-목록&quot; id=&quot;markdown-toc-완성된-튜토리얼-목록&quot;&gt;완성된 튜토리얼 목록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#튜토리얼-제작-진행사항&quot; id=&quot;markdown-toc-튜토리얼-제작-진행사항&quot;&gt;튜토리얼 제작 진행사항&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#소식들&quot; id=&quot;markdown-toc-소식들&quot;&gt;소식들&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#웬디-근황&quot; id=&quot;markdown-toc-웬디-근황&quot;&gt;웬디 근황&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#좋은-소식&quot; id=&quot;markdown-toc-좋은-소식&quot;&gt;좋은 소식&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#우울한-소식&quot; id=&quot;markdown-toc-우울한-소식&quot;&gt;우울한 소식&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#맺음말&quot; id=&quot;markdown-toc-맺음말&quot;&gt;맺음말&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;들어가는-말&quot;&gt;들어가는 말&lt;/h2&gt;

&lt;p&gt;2017년 2월은 레드벨벳 웬디와 Wendy가 있어 행복하고 재미나다.&lt;/p&gt;

&lt;h2 id=&quot;프로젝트-진행-사항&quot;&gt;프로젝트 진행 사항&lt;/h2&gt;
&lt;p&gt;자원(통화, 아이템)을 관리할 수 있게 되고 지급 관리까지 제작되었다.&lt;/p&gt;

&lt;p&gt;서비스로 쿠폰도 제작!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/totuworld/Wendy&quot;&gt;Wendy 프로젝트 레파지토리&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기능-목록&quot;&gt;기능 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기기 관리&lt;/li&gt;
  &lt;li&gt;사용자 관리&lt;/li&gt;
  &lt;li&gt;통화 관리&lt;/li&gt;
  &lt;li&gt;아이템 관리&lt;/li&gt;
  &lt;li&gt;자원(통화, 아이템) 지급 관리&lt;/li&gt;
  &lt;li&gt;쿠폰&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;튜토리얼-제작-사항&quot;&gt;튜토리얼 제작 사항&lt;/h2&gt;
&lt;p&gt;2월에도 2개 강좌가 더 제작되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5강 - 아이템 관리&lt;/li&gt;
  &lt;li&gt;6강 - 자원 지급 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;완성된-튜토리얼-목록&quot;&gt;완성된 튜토리얼 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1강 - &lt;a href=&quot;https://blog.totu.dev/2016/12/21/azureandunity-01/&quot;&gt;Hello, world!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2강 - &lt;a href=&quot;https://blog.totu.dev/2016/12/29/azureandunity-02/&quot;&gt;SQL데이터베이스스와 환경설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;3강 - &lt;a href=&quot;https://blog.totu.dev/2017/01/12/azureandunity-03/&quot;&gt;기기와 사용자 관리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;4강 - &lt;a href=&quot;https://blog.totu.dev/2017/01/26/azureandunity-04/&quot;&gt;통화관리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;5강 - &lt;a href=&quot;https://blog.totu.dev/2017/02/09/azureandunity-05/&quot;&gt;아이템 관리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;6강 - &lt;a href=&quot;https://blog.totu.dev/2017/02/21/azureandunity-06/&quot;&gt;자원 지급 관리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;튜토리얼-제작-진행사항&quot;&gt;튜토리얼 제작 진행사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;7강 : … 시작도 못했는데 어쩌죠?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;소식들&quot;&gt;소식들&lt;/h2&gt;
&lt;h3 id=&quot;웬디-근황&quot;&gt;웬디 근황&lt;/h3&gt;

&lt;p&gt;2월 21일. 웬디는 생일이었다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/87OYm-cKeA8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 좋고 행복한 일상만 보내라 웬디야!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;좋은-소식&quot;&gt;좋은 소식&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/korea/msdn/flash/archive/msdn_newsletter_1701.html&quot;&gt;MSDN 뉴스레터 2017년 1월&lt;/a&gt;에 강좌 소식이 소개되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/msdn_newsletter_201701.png&quot; alt=&quot;뉴스레터인증샷&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요리왕 류ㅎㅇ과장님 감사합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 &lt;code&gt;나는 프로그래머다&lt;/code&gt; 페이스북 페이지에도 소개되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/iamprogrammer_0224.png&quot; alt=&quot;나프다인증샷&quot; width=&quot;460px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6강은 화요일(2월 21일 웬디 생일)에 &lt;a href=&quot;http://www.youtube.com/user/totuworld7/live&quot;&gt;유튜브 스트리밍&lt;/a&gt;으로 방송했다.&lt;/p&gt;

&lt;p&gt;4명이 소중한 분들이 있어서 힘이났다. 편집이 1시간 밖에 걸리지 않아서 너무 좋았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그래서 3월 7일 화요일 7강도 라이브로 진행하고 편집할 생각이다!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;우울한-소식&quot;&gt;우울한 소식&lt;/h3&gt;

&lt;p&gt;유튜브 스트리밍에 앞서 대기중일 때 레드벨벳 신곡을 틀었다. 저작권을 침해한 내 잘못이다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;code&gt;SM Ent&lt;/code&gt;로부터 경고를 득하게 되었다.&lt;/p&gt;

&lt;p&gt;다음 방송에서는 조심하고 또 조심해야겠다.&lt;/p&gt;

&lt;h2 id=&quot;맺음말&quot;&gt;맺음말&lt;/h2&gt;

&lt;p&gt;새로운 회사로 옮기는 시점이 2월 초였다. 진행이 어렵게되서 약속을 지키지 못하면 어쩌나 걱정했다.&lt;/p&gt;

&lt;p&gt;다행히 5, 6강 강을 약속한 날짜에 발행했다(나와의 약속?).&lt;/p&gt;

&lt;p&gt;1차 목표로 했던 7강까지 잘 마무리하길 바란다.&lt;/p&gt;

&lt;p&gt;그 이후는 어떤 기능을 필요로하는지 의견을 듣고 정리해서 진행해야겠다.&lt;/p&gt;
</description>
            <pubDate>Fri, 24 Feb 2017 21:00:00 +0900</pubDate>
            <link>https://blog.totu.dev/2017/02/24/wendynotification/</link>
            <guid isPermaLink="true">https://blog.totu.dev/2017/02/24/wendynotification/</guid>
            
            
            <category>wendy</category>
            
        </item>
      
    
  </channel>
</rss>
